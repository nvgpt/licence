{"version":3,"file":"static/js/6982.c63273e8.chunk.js","mappings":"4SAwJA,QA3IA,WAEE,MAAMA,GAAWC,EAAAA,EAAAA,OACVC,EAASC,GAAcC,EAAAA,UAAe,IACtCC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,MAM7BC,EAAmBC,EAAAA,GAAW,CAClCC,MAAOD,EAAAA,KACJC,MAAM,uCACNC,SAAS,wBAoDd,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAAAC,UACRF,EAAAA,EAAAA,KAACG,EAAAA,EAAG,CAAAD,UACFF,EAAAA,EAAAA,KAACI,EAAAA,EAAG,CAACC,GAAI,GAAGH,UACVI,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sBAAqBL,SAAA,EAClCI,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBL,SAAA,EACjCF,EAAAA,EAAAA,KAAA,OAAKQ,IAAKC,EAAWC,IAAI,gBACzBV,EAAAA,EAAAA,KAAA,OAAKO,UAAU,qBAAoBL,UACjCF,EAAAA,EAAAA,KAAA,OAAKQ,IAAKG,EAAAA,EAAMD,IAAI,eAGxBJ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,6CAA4CL,SAAA,EACzDF,EAAAA,EAAAA,KAAA,OAAAE,UACEF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,wBAQNF,EAAAA,EAAAA,KAACY,EAAAA,GAAM,CACLC,cAAe,CACbf,MAAO,IAITF,iBAAkBA,EAClBkB,SA5EOC,UACnBxB,GAAW,GAEX,MAAM,MAAEO,GAAUkB,EAElB,IACE,MAAMC,QAAiBC,EAAAA,EAAAA,IAAQC,EAAAA,EAAcC,gBAAiB,CAC5DtB,QACA,UAAa,eAErBuB,QAAQC,IAAIL,GACM,OAARA,QAAQ,IAARA,GAAAA,EAAUM,QAEZC,IAAAA,KAAU,CACRC,KAAM,UACNC,MAAO,WACPC,KAAM,IAAIV,EAASW,WACnBC,kBAAmB,SAClBC,MAAK,KACN1C,EAAS,IAAI,IAIfoC,IAAAA,KAAU,CACRC,KAAM,QACNC,MAAO,mBACPC,KAAM,mBACNE,kBAAmB,aAGzB,CAAE,MAAOpC,GAGP,MAAMsC,EAAoB,OAALtC,QAAK,IAALA,OAAK,EAALA,EAAOmC,QAE5BlC,EAASqC,GAETP,IAAAA,KAAU,CACRC,KAAM,QACNC,MAAOK,EACPJ,KAAMlC,EAAMA,MACZoC,kBAAmB,aAEvB,CAAC,QACCtC,GAAW,EACb,GA+BmCW,SAEtB8B,IAAA,IAAC,cAAEC,EAAa,aAAEC,GAAcF,EAAA,OAC/B1B,EAAAA,EAAAA,MAAC6B,EAAAA,GAAI,CAAC5B,UAAU,wCAAuCL,SAAA,EACrDI,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYL,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAOoC,QAAQ,QAAOlC,SAAC,kBACvBF,EAAAA,EAAAA,KAACqC,EAAAA,GAAK,CACJC,KAAK,QACLC,GAAG,QACHC,KAAK,QACLjC,UAAU,eACVkC,YAAY,yBAEdzC,EAAAA,EAAAA,KAAC0C,EAAAA,GAAY,CACXF,KAAK,QACLG,UAAU,MACVpC,UAAU,sBAQdP,EAAAA,EAAAA,KAAA,OAAKO,UAAU,gDAA+CL,UAC5DF,EAAAA,EAAAA,KAAA,UACEsC,KAAK,SACL/B,UAAU,+BACVqC,SAAUV,GAAgB5C,EAC1BuD,MAAO,CAAEC,SAAU,OAAQC,MAAO,QAAS7C,SAE1CZ,EAAU,gBAAkB,eAG5B,eAUzB,C","sources":["Components/InstructorForgetPassword.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport loginSide from \"../assets/images/ins-img.png\"; // Image for side section\r\nimport logo from \"../assets/images/logo.svg\"; // Logo image\r\nimport { Link, useNavigate } from \"react-router-dom\"; // Import useNavigate for redirecting\r\nimport { apiPost } from \"../utilities/axiosInstance\"; // Assuming apiPost is set up for POST requests\r\nimport API_ENDPOINTS from \"../utilities/apiEndPoints\"; // Your API endpoints\r\nimport Swal from \"sweetalert2\"; // Import SweetAlert2 for notifications\r\nimport { useAuth } from \"../context/AuthContext\";\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\"; // Import Formik\r\nimport * as Yup from \"yup\"; // Import Yup for validation\r\nimport axios from 'axios';\r\n\r\nfunction InstructorForgetPassword() {\r\n \r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [error, setError] = useState(null); // To capture any error during form submission\r\n\r\n  // Check if user is already logged in when the component mounts\r\n\r\n\r\n  // Validation schema for Formik\r\n  const validationSchema = Yup.object({\r\n    email: Yup.string()\r\n      .email(\"Please enter a valid email address.\")\r\n      .required(\"Email is required.\"),\r\n  });\r\n\r\n  // Handle form submission and API call\r\n  const handleSubmit = async (values) => {\r\n    setLoading(true);\r\n\r\n    const { email } = values;\r\n\r\n    try {\r\n      const response = await apiPost(API_ENDPOINTS.FORGOT_PASSWORD, {\r\n        email,\r\n        \"user_type\": \"instructor\",\r\n      });\r\nconsole.log(response)\r\n      if (response?.success) {\r\n         // Show SweetAlert for success\r\n        Swal.fire({\r\n          icon: \"success\",\r\n          title: \"Success!\",\r\n          text: ` ${response.message}!`,\r\n          confirmButtonText: \"Okay\",\r\n        }).then(() => {\r\n          navigate(\"/\");\r\n        });\r\n      } else {\r\n        //throw new Error(response)\r\n        Swal.fire({\r\n          icon: \"error\",\r\n          title: 'Invalid Email id',\r\n          text: \"Invalid EMail ID\",\r\n          confirmButtonText: \"Try Again\",\r\n        });\r\n      }\r\n    } catch (error) {\r\n      // Log the full error to understand its structure\r\n      //console.log(error?.message)\r\n      const errorMessage = error?.message;\r\n      // Set the error message for display in the UI\r\n      setError(errorMessage);\r\n      // Show a SweetAlert popup with the correct error message\r\n      Swal.fire({\r\n        icon: \"error\",\r\n        title: errorMessage,\r\n        text: error.error,\r\n        confirmButtonText: \"Try Again\",\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col lg={12}>\r\n          <div className=\"LoginFormWrp d-flex\">\r\n            <div className=\"LoginFormWrp__left\">\r\n              <img src={loginSide} alt=\"Login Side\" />\r\n              <div className=\"LoginFormWrp__logo\">\r\n                <img src={logo} alt=\"logo\" />\r\n              </div>\r\n            </div>\r\n            <div className=\"LoginFormWrp__right InstructorLogin__right\">\r\n              <div>\r\n                <h2>Forget Password?</h2>\r\n                {/* <p>\r\n                  Want to become an Instructor with Us?\r\n                  <Link to=\"/instructor-registration\"> Register Now!</Link>\r\n                </p> */}\r\n              </div>\r\n\r\n              {/* Formik Form */}\r\n              <Formik\r\n                initialValues={{\r\n                  email: \"\",\r\n                  //password: \"\",\r\n                  //agreeToTerms: false,\r\n                }}\r\n                validationSchema={validationSchema}\r\n                onSubmit={handleSubmit}\r\n              >\r\n                {({ setFieldValue, isSubmitting }) => (\r\n                  <Form className=\"LoginFormWrp__form d-flex flex-column\">\r\n                    <div className=\"form-group\">\r\n                      <label htmlFor=\"email\">* Your Email</label>\r\n                      <Field\r\n                        type=\"email\"\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Enter your email...\"\r\n                      />\r\n                      <ErrorMessage\r\n                        name=\"email\"\r\n                        component=\"div\"\r\n                        className=\"error-message\"\r\n                      />\r\n                    </div>\r\n\r\n               \r\n\r\n                 \r\n\r\n                    <div className=\"d-flex flex-column gap-3 LoginFormWrp__btnWrp\">\r\n                      <button\r\n                        type=\"submit\"\r\n                        className=\"btn btn-white has-hover-blue\"\r\n                        disabled={isSubmitting || loading}\r\n                        style={{ maxWidth: \"100%\", width: \"100%\" }}\r\n                      >\r\n                        {loading ? \"Sending in...\" : \"Send >\"}\r\n                      </button>\r\n                    </div>\r\n                  </Form>\r\n                )}\r\n              </Formik>\r\n              \r\n            </div>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default InstructorForgetPassword;\r\n"],"names":["navigate","useNavigate","loading","setLoading","React","error","setError","useState","validationSchema","Yup","email","required","_jsx","Container","children","Row","Col","lg","_jsxs","className","src","loginSide","alt","logo","Formik","initialValues","onSubmit","async","values","response","apiPost","API_ENDPOINTS","FORGOT_PASSWORD","console","log","success","Swal","icon","title","text","message","confirmButtonText","then","errorMessage","_ref","setFieldValue","isSubmitting","Form","htmlFor","Field","type","id","name","placeholder","ErrorMessage","component","disabled","style","maxWidth","width"],"sourceRoot":""}