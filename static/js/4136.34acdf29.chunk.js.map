{"version":3,"file":"static/js/4136.34acdf29.chunk.js","mappings":"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","sources":["Components/Instructor/Registration.jsx","Components/PageTopBanner.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport PageTopBanner from \"../PageTopBanner\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\"; // For validation\r\nimport Swal from \"sweetalert2\"; // SweetAlert for alerts\r\nimport { useDispatch } from \"react-redux\"; // Assuming you're using Redux for state management\r\nimport {\r\n  startLoading,\r\n  finishLoading,\r\n} from \"../../redux/features/loader/loaderSlice\"; // Modify according to your Redux setup\r\nimport { apiPostFormData } from \"../../utilities/axiosInstance\";\r\nimport API_ENDPOINTS from \"../../utilities/apiEndPoints\";\r\n\r\nconst formTitle = {\r\n  title: \"Submit a Request\",\r\n};\r\n\r\nfunction InstructorRegistration() {\r\n  const [error, setError] = useState(null); // To capture any error during form submission\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate(); // Initialize useNavigate hook for redirect\r\n\r\n  // useEffect(() => {\r\n\r\n  //   async function naveen() {\r\n  //     try {\r\n  //       await apiPost(`${API_ENDPOINTS.INSTRUCTOR_REGISTER}`);\r\n  //     } catch (error) {\r\n  //       console.log(error)\r\n  //     }\r\n\r\n  //   }\r\n\r\n  //   naveen();\r\n\r\n  // }, [])\r\n\r\n  // Formik setup\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      first_name: \"\",\r\n      last_name: \"\",\r\n      email: \"\",\r\n      phoneNo: \"\",\r\n      postcode: \"\",\r\n      transmission_type: \"auto\",\r\n      about_your_self: \"\",\r\n      files: [],\r\n    },\r\n    validationSchema: Yup.object({\r\n      first_name: Yup.string().matches(/^[A-Za-z\\s]+$/, \"should only contain letters\").required(\"First name is required\"),\r\n      last_name: Yup.string().matches(/^[A-Za-z\\s]+$/, \"should only contain letters\").required(\"Last name is required\"),\r\n      email: Yup.string()\r\n        .required(\"Email is required\")\r\n        .matches(\r\n          /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\r\n          \"Valid email is required\"\r\n        ),\r\n\r\n      phoneNo: Yup.string()\r\n        .required(\"Phone number is required\")\r\n        .matches(\r\n          /^[0-9\\s\\-]+$/,\r\n          \"Phone number must only contain digits, spaces, or hyphens\"\r\n        ),\r\n\r\n      postcode: Yup.string()\r\n        .matches(/^\\d+$/, \"Postcode must be digits only\")\r\n        .required(\"Postcode is required\"),\r\n    }),\r\n    transmission_type: Yup.string()\r\n      .required(\"Please select the transmission type\")\r\n      .notOneOf([\"0\"], \"Please select the transmission type\"),\r\n    onSubmit: async (values) => {\r\n      // Prepare the form data for submission\r\n      const formData = new FormData();\r\n      Object.entries(values).forEach(([key, value]) => {\r\n        formData.append(key, value);\r\n      });\r\n      if (Array.isArray(values.files) && values.files.length > 0) {\r\n        values.files.forEach((file, index) => {\r\n          formData.append(`files[${index}]`, file);\r\n        });\r\n      }\r\n\r\n      try {\r\n        // Dispatch startLoading action before making the API call\r\n        dispatch(startLoading());\r\n\r\n        // Post form data to the API using a custom `apiPost` function (similar to your example)\r\n        //  const response = await apiPost(`${API_ENDPOINTS.INSTRUCTOR_REGISTER}`, formData);\r\n        const response = await apiPostFormData(\r\n          `${API_ENDPOINTS.INSTRUCTOR_REGISTER}`,\r\n          formData\r\n        );\r\n        // console.log(values);\r\n        //const response = '';\r\n        // Check if the response is valid\r\n        if (response?.success) {\r\n          // Show SweetAlert on success\r\n          Swal.fire({\r\n            icon: \"success\",\r\n            title: \"Form Submitted Successfully!\",\r\n            text: \"Your request has been sent for administration approval.\",\r\n          });\r\n\r\n          // Redirect after 10 seconds\r\n          setTimeout(() => {\r\n            navigate(\"/\"); // Navigate to home page\r\n          }, 10000);\r\n        } else {\r\n          throw new Error(response);\r\n        }\r\n      } catch (error) {\r\n       // console.log('error',error);\r\n        \r\n        // Log the full error to understand its structure\r\n        const errorMessage = error\r\n        // Set the error message for display in the UI\r\n        setError(errorMessage);\r\n        // Show a SweetAlert popup with the correct error message\r\n        Swal.fire({\r\n          icon: \"error\",\r\n          title: \"Registration Failed\",\r\n          text: errorMessage,\r\n          confirmButtonText: \"Try Again\",\r\n        });\r\n      } finally {\r\n        // Dispatch finishLoading action after the API call\r\n        dispatch(finishLoading());\r\n      }\r\n    },\r\n  });\r\n\r\n  // File handling logic\r\n  const handleFileChange = (e) => {\r\n    const files = Array.from(e.target.files); // Convert FileList to an Array\r\n    formik.setFieldValue(\"files\", files); // Store the array in Formik state\r\n    // console.log(\"File Name:\", files[0].name); // Logs file name correctly\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PageTopBanner title=\"Register to become an Instructor\" />\r\n      <div className=\"Registration bg-grey\">\r\n        <Container>\r\n          <Row>\r\n            <Col lg={12}>\r\n              <div className=\"Registration__wrp shadow bg-white\">\r\n                <div className=\"Registration__left\">\r\n                  <h3>{formTitle.title}</h3>\r\n\r\n                  {/* Display error message */}\r\n                  {/* {error && <div className=\"alert alert-danger\">{error}</div>} */}\r\n\r\n                  {/* Contact Form */}\r\n                  <form\r\n                    className=\"RegistrationForm\"\r\n                    onSubmit={formik.handleSubmit}\r\n                  >\r\n                    <div className=\"RegistrationForm__group\">\r\n                      <div className=\"RegistrationForm__field\">\r\n                        <label htmlFor=\"first_name\">*First Name</label>\r\n                        <input\r\n                          type=\"text\"\r\n                          name=\"first_name\"\r\n                          id=\"first_name\"\r\n                          {...formik.getFieldProps(\"first_name\")}\r\n                        />\r\n                        {formik.touched.first_name &&\r\n                          formik.errors.first_name && (\r\n                            <div style={{ color: \"red\" }}>\r\n                              {formik.errors.first_name}\r\n                            </div>\r\n                          )}\r\n                      </div>\r\n\r\n                      <div className=\"RegistrationForm__field\">\r\n                        <label htmlFor=\"lastName\">*Last Name</label>\r\n                        <input\r\n                          type=\"text\"\r\n                          name=\"last_name\"\r\n                          id=\"last_name\"\r\n                          {...formik.getFieldProps(\"last_name\")}\r\n                        />\r\n                        {formik.touched.last_name &&\r\n                          formik.errors.last_name && (\r\n                            <div style={{ color: \"red\" }}>\r\n                              {formik.errors.last_name}\r\n                            </div>\r\n                          )}\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"RegistrationForm__group\">\r\n                      <div className=\"RegistrationForm__field\">\r\n                        <label htmlFor=\"email\">*Email Address</label>\r\n                        <input\r\n                          type=\"email\"\r\n                          name=\"email\"\r\n                          id=\"email\"\r\n                          {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email && (\r\n                          <div style={{ color: \"red\" }}>\r\n                            {formik.errors.email}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n\r\n                      <div className=\"RegistrationForm__field\">\r\n                        <label htmlFor=\"phoneNo\">*Phone Number</label>\r\n                        <input\r\n                          type=\"tel\"\r\n                          name=\"phoneNo\"\r\n                          id=\"phoneNo:\"\r\n                          {...formik.getFieldProps(\"phoneNo\")}\r\n                        />\r\n                        {formik.touched.phoneNo && formik.errors.phoneNo && (\r\n                          <div style={{ color: \"red\" }}>\r\n                            {formik.errors.phoneNo}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"RegistrationForm__field\">\r\n                      <label htmlFor=\"postcode\">*Postcode</label>\r\n                      <input\r\n                        type=\"text\"\r\n                        name=\"postcode\"\r\n                        id=\"postcode\"\r\n                        {...formik.getFieldProps(\"postcode\")}\r\n                      />\r\n                      {formik.touched.postcode && formik.errors.postcode && (\r\n                        <div style={{ color: \"red\" }}>\r\n                          {formik.errors.postcode}\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n\r\n                    <div className=\"RegistrationForm__field\">\r\n                      <label htmlFor=\"transmission\">\r\n                        *Please select the transmission\r\n                      </label>\r\n                      <select\r\n                        name=\"transmission_type\"\r\n                        id=\"transmission_type\"\r\n                        {...formik.getFieldProps(\"transmission_type\")}\r\n                      >\r\n                        <option value=\"0\" disabled>\r\n                          Select transmission\r\n                        </option>\r\n                        <option value=\"auto\">Automatic</option>\r\n                        <option value=\"manual\">Manual</option>\r\n                      </select>\r\n                      {formik.touched.transmission_type &&\r\n                      formik.errors.transmission_type ? (\r\n                        <div className=\"error-message\">\r\n                          {formik.errors.transmission_type}\r\n                        </div>\r\n                      ) : null}\r\n                    </div>\r\n\r\n                    <div className=\"RegistrationForm__field hasTextarea\">\r\n                      <label htmlFor=\"about_your_self\">\r\n                        Tell us more about yourself, the more information the\r\n                        better\r\n                      </label>\r\n                      <textarea\r\n                        name=\"about_your_self\"\r\n                        id=\"about_your_self\"\r\n                        {...formik.getFieldProps(\"about_your_self\")}\r\n                      />\r\n                    </div>\r\n                    <p className=\"RegistrationForm__note\">\r\n                      Some information you include in your message may be\r\n                      considered sensitive by some privacy laws. By submitting\r\n                      your request, you give us consent to process any sensitive\r\n                      information included in your enquiry.\r\n                    </p>\r\n\r\n                    {/* Custom File Input */}\r\n                    <div className=\"RegistrationForm__field\">\r\n                      <label htmlFor=\"file\">Attachments (Optional)</label>\r\n                      <div className=\"fileWrp position-relative overflow-hidden\">\r\n                        <p>\r\n                          {formik.values.files &&\r\n                          formik.values.files.length > 0 ? (\r\n                            <span>\r\n                              Selected File:\r\n                              <strong> {formik.values.files[0].name}</strong>\r\n                            </span>\r\n                          ) : (\r\n                            <span>\r\n                              <strong>UPLOAD FILE</strong> or drop files here\r\n                            </span>\r\n                          )}\r\n                        </p>\r\n                        <input\r\n                          type=\"file\"\r\n                          name=\"files\"\r\n                          id=\"files\"\r\n                          onChange={handleFileChange}\r\n                          accept=\"image/*,.doc, .docx,.pdf\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n\r\n                    <button type=\"submit\" className=\"btn btn-blue\">\r\n                      Submit Form\r\n                    </button>\r\n                  </form>\r\n                </div>\r\n                <div className=\"Registration__right\"></div>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n      <ToastContainer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default InstructorRegistration;\r\n","import React from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\n\r\nfunction PageTopBanner({ title, children }) {\r\n  return (\r\n    <div className=\"PageTopBanner\">\r\n      <Container>\r\n        <Row>\r\n          <Col lg={12}>\r\n            {/* If title is provided, display it, otherwise render children */}\r\n            {title ? <h1>{title}</h1> : children}\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PageTopBanner;\r\n"],"names":["formTitle","error","setError","useState","dispatch","useDispatch","navigate","useNavigate","formik","useFormik","initialValues","first_name","last_name","email","phoneNo","postcode","transmission_type","about_your_self","files","validationSchema","Yup","matches","required","notOneOf","onSubmit","async","formData","FormData","Object","entries","values","forEach","_ref","key","value","append","Array","isArray","length","file","index","startLoading","response","apiPostFormData","API_ENDPOINTS","INSTRUCTOR_REGISTER","success","Error","Swal","icon","title","text","setTimeout","errorMessage","confirmButtonText","finishLoading","_jsxs","_Fragment","children","_jsx","PageTopBanner","className","Container","Row","Col","lg","handleSubmit","htmlFor","type","name","id","getFieldProps","touched","errors","style","color","disabled","onChange","e","from","target","setFieldValue","accept","ToastContainer"],"sourceRoot":""}