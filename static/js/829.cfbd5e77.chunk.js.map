{"version":3,"file":"static/js/829.cfbd5e77.chunk.js","mappings":"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","sources":["Components/GoogleMap.js","Trainer/Components/Breadcrumb.jsx","Trainer/Components/accountsetting/lessonLocation.js","Trainer/Components/accountsetting/testLocation.js","Trainer/Components/accountsetting/timeSlot/components/TimeSlotPicker.jsx","Trainer/Components/accountsetting/timeSlot/components/DayScheduler.jsx","Trainer/Components/accountsetting/timeSlot/timeSlot.jsx","Trainer/Components/accountsetting/ServiceAreaAvailability.jsx"],"sourcesContent":["// old\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nlet googleMapsScriptLoaded = false; // Global flag\r\n\r\nconst MapComponent = ({ locations }) => {\r\n  const mapRef = useRef(null);\r\n  const [map, setMap] = useState(null);\r\n  const [circles, setCircles] = useState([]);\r\n  const googleKey = process.env.REACT_APP_GOOGLE_MAP_KEY;\r\n\r\n  useEffect(() => {\r\n    if (window.google && window.google.maps && mapRef.current) {\r\n        setMap(new window.google.maps.Map(mapRef.current, {\r\n          center: { lat: -26.85, lng: 133.77 },\r\n            zoom: 5,\r\n          }));\r\n      return; // If Google Maps is already loaded, exit early\r\n    }\r\n\r\n    if (googleMapsScriptLoaded) return; // Prevent multiple script load\r\n    // Load Google Maps API script \r\n    const script = document.createElement('script');\r\nscript.src = `https://maps.googleapis.com/maps/api/js?key=${googleKey}&libraries=places&callback=initMap`;\r\nscript.async = true; // Set async attribute\r\n//script.defer = true;\r\n    script.onerror = () => {\r\n        console.log(\"Google Maps API script load error. Check your internet connection and API Key.\")\r\n    }\r\n    script.onload = () => {\r\n      // Initialize map once script is loaded\r\n      setMap(new window.google.maps.Map(mapRef.current, {\r\n        center: { lat: -26.85, lng: 133.77 }, // Default center\r\n        zoom: 5,\r\n      }));\r\n    };\r\n    document.head.appendChild(script);\r\n\r\n    return () => {\r\n      // Clean up script on unmount\r\n      document.head.removeChild(script);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (map && locations && locations.length > 0) {\r\n      const geocoder = window.google && window.google.maps ? new window.google.maps.Geocoder() : {\r\n        geocode: (request, callback) => {\r\n          // You can replace with your own geocoding logic here\r\n          console.error('Geocoding is not implemented. Please replace this with a real geocoding API call.');\r\n          callback([], 'ZERO_RESULTS');\r\n        },\r\n      };\r\n\r\n      // Clear existing circles\r\n      circles.forEach(circle => circle.setMap(null));\r\n      setCircles([]);\r\n\r\n      const newCircles = [];\r\n      const bounds = new window.google.maps.LatLngBounds(); // For auto-zooming\r\n\r\n      locations.forEach((pincode, index) => {\r\n        geocoder.geocode({ address: pincode.toString() }, (results, status) => {\r\n          if (status === 'OK' && results && results[0]) {\r\n            const coords = results[0].geometry.location;\r\n\r\n            const circle = new window.google.maps.Circle({\r\n              strokeColor: '#FF0000',\r\n              strokeOpacity: 0.8,\r\n              strokeWeight: 2,\r\n              fillColor: '#FF0000',\r\n              fillOpacity: 0.35,\r\n              map: map,\r\n              center: coords,\r\n              radius: 1000, // Adjust radius as needed\r\n            });\r\n            newCircles.push(circle);\r\n            setCircles(prevCircles => [...prevCircles, circle]);\r\n            bounds.extend(coords);\r\n\r\n             map.fitBounds(bounds);\r\n             map.setZoom(12); // Normal zoom for a single location\r\n                map.setCenter(coords);\r\n\r\n            // if (index === locations.length - 1) { // this loop is for when location are more than 1 then zoom accordingly, but is not working\r\n            //   // Adjust zoom based on the number of locations\r\n            //   if (locations.length === 1) {\r\n            //     map.setZoom(12); // Normal zoom for a single location\r\n            //     map.setCenter(coords);\r\n            //   } else {\r\n            //     map.fitBounds(bounds); // Fit bounds for multiple locations\r\n            //   }\r\n            // }\r\n\r\n\r\n          } else {\r\n            console.error(`Geocode was not successful for ${pincode}:`, status);\r\n            if (status === 'ZERO_RESULTS') {\r\n              console.log(`Could not find location for pincode: ${pincode}`);\r\n            } else {\r\n              console.log(`Geocode was not successful for pincode: ${pincode}. Status: ${status}`);\r\n            }\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }, [map, locations]);\r\n\r\n  return (\r\n    <div style={{ height: '400px', width: '100%' }} ref={mapRef} />\r\n  );\r\n};\r\n \r\n\r\nexport default MapComponent;","import React from \"react\";\r\nimport { useLocation, Link } from \"react-router-dom\";\r\nimport homeIco from \"../../assets/images/home.svg\";\r\n\r\nexport default function Breadcrumb() {\r\n  const location = useLocation();\r\n  const pathSegments = location.pathname.split(\"/\").filter(Boolean); // Split and clean the path\r\n\r\n  // Determine if it's a 'trainer' path, which should be ignored in the breadcrumb\r\n  const isTrainerPage = pathSegments[0] === \"instructor\";\r\n\r\n  // If it's a 'learner-list-details' page, redirect to 'learner-list'\r\n  if (pathSegments[1] === \"learner-list-details\" && pathSegments.length > 2) {\r\n    pathSegments[1] = \"learner-list\"; // Modify to 'learner-list'\r\n    pathSegments.pop(); // Remove the last segment (id like 1)\r\n  }\r\n\r\n  // If 'trainer' is in the path, skip it and take 'dashboard' instead\r\n  const breadcrumbs = pathSegments\r\n    .filter(segment => segment !== \"instructor\") // Remove 'trainer' from breadcrumbs\r\n    .map((segment, index) => {\r\n      if (segment === \"dashboard\" && index === 0) {\r\n        // Avoid showing 'Dashboard' in breadcrumb if it's the root page\r\n        return null;\r\n      }\r\n      return segment;\r\n    })\r\n    .filter(Boolean); // Filter out any null values (to avoid empty breadcrumb)\r\n\r\n  const secondLastSegment = breadcrumbs[breadcrumbs.length - 2];\r\n  const lastSegment = breadcrumbs[breadcrumbs.length - 1];\r\n\r\n  return (\r\n    <div className=\"breadcrumb\">\r\n      <p>\r\n        {breadcrumbs.length > 0 && (\r\n          <Link to=\"/instructor/dashboard\">\r\n            <img src={homeIco} alt=\"Home\" />\r\n          </Link>\r\n        )}\r\n        {secondLastSegment && (\r\n          <span>\r\n            &gt; &nbsp;\r\n            <Link to={`/instructor/${secondLastSegment}`}>\r\n              {secondLastSegment.replace(/-/g, \" \")} {/* Optional: Replace hyphens with spaces */}\r\n            </Link>\r\n          </span>\r\n        )}\r\n        {lastSegment && (\r\n          <span>\r\n            &gt; &nbsp;\r\n            {lastSegment.replace(/-/g, \" \")} {/* Last segment, no link */}\r\n          </span>\r\n        )}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { apiPost } from \"../../..//utilities/axiosInstance\";\r\nimport API_ENDPOINTS from \"../../../utilities/apiEndPoints\";\r\nimport { useAuth } from \"../../../context/AuthContext\";\r\n\r\nconst LessonLocation = ({lessonLocation, setLessonLocation}) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const [isSuggestionSelected, setIsSuggestionSelected] = useState(true);\r\n  const [loading, setLoading] = useState(false);\r\n  const [noResults, setNoResults] = useState(false);\r\n  const [suggestions, setSuggestions] = useState([]);\r\n  const {  setSelectSearchValue } = useAuth();\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === 'Enter') {\r\n      setLessonLocation([...lessonLocation, inputValue]);\r\n      setInputValue('');\r\n    }\r\n  };\r\n\r\n  const removeTab = (indexToRemove) => {\r\n    setLessonLocation(lessonLocation.filter((tab, index) => tab.id !== indexToRemove));\r\n  };\r\n\r\n\r\n    useEffect(() => {\r\n      if (!isSuggestionSelected) {\r\n        const delayDebounceFn = setTimeout(() => {\r\n          fetchSuggestions(inputValue);\r\n        }, 500);\r\n  \r\n        return () => clearTimeout(delayDebounceFn);\r\n      }\r\n    }, [\r\n      inputValue, \r\n      isSuggestionSelected]);\r\n\r\n    const handleInputChange = (e) => {\r\n      const value = e.target.value;\r\n        setInputValue(value);\r\n        setIsSuggestionSelected(false);\r\n        if(e.target.value.length == 0){\r\n          setNoResults(false)\r\n          setLoading(false)\r\n          setSuggestions([]);\r\n        }\r\n    };\r\n\r\n    const fetchSuggestions = async (query) => {\r\n      setLoading(true);\r\n      setNoResults(false);\r\n  \r\n      try {\r\n        const response = await apiPost(API_ENDPOINTS.FIND_SUBURBS, {\r\n          filter: query,\r\n        });\r\n  \r\n        if (response.success && response.data) {\r\n          const filteredSuggestions = response.data.filter((item) =>\r\n            [item.suburb, item.stateCode, item.postcode.toString()].some((field) =>\r\n              field.toLowerCase().includes(query.toLowerCase())\r\n            )\r\n          );\r\n  \r\n          setNoResults(filteredSuggestions.length === 0);\r\n          setSuggestions(filteredSuggestions);\r\n        } else {\r\n          setSuggestions([]);\r\n          setNoResults(true);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching suggestions:\", error);\r\n        setSuggestions([]);\r\n        setNoResults(true);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    const handleSuggestionClick = (suggestion) => {\r\n    //  setInputValue(`${suggestion.suburb}, ${suggestion.stateCode} (${suggestion.postcode})`);\r\n    setLessonLocation([...lessonLocation, \r\n      {\r\n        id:suggestion.id,\r\n        name:`${suggestion.suburb}, ${suggestion.stateCode} (${suggestion.postcode})`,\r\n        postcode:suggestion.postcode,\r\n        statecode:suggestion.stateCode,\r\n        suburb:suggestion.suburb,\r\n      }\r\n    ]);\r\n      setInputValue('');\r\n      setIsSuggestionSelected(true);\r\n      setSuggestions([]);\r\n      setSelectSearchValue(true)\r\n    };\r\n\r\n  return (\r\n    <div className=\"container-fluid\" style={{ maxWidth: '1200px','padding':'0' }}>\r\n      <div className=\" rounded p-2 bg-white shadow-sm\" style={{border:'1px solid #000000'}}>\r\n        <div className=\"tabs-container location-tabs-container\">\r\n          {lessonLocation.map((tab, index) => (\r\n            <div  key={tab.id} className=\"tab-item d-inline-flex align-items-center\">\r\n              <span className=\"tab-text\">{tab.name}</span>\r\n              <button onClick={() => removeTab(tab.id)} className=\"close-btn\"  aria-label=\"Remove tab\" > x </button>\r\n            </div>\r\n          ))}\r\n          {/* <input type=\"text\" value={inputValue} onChange={(e) => setInputValue(e.target.value)} onKeyDown={handleKeyDown} placeholder=\"\" className=\"tab-input\"/> */}\r\n\r\n          <div className=\"inputWrp position-relative\">\r\n          <input type=\"text\" placeholder=\"Enter your Servicing area...\" value={inputValue} onChange={handleInputChange} onKeyDown={handleKeyDown} className=\"tab-input\"/>\r\n\r\n          <ul className=\"suggestions-list\">\r\n            {loading && <li>Loading...</li>}\r\n            {noResults && !loading && ( <li>No results found for \"{inputValue}\"</li> )}\r\n\r\n            {suggestions.length > 0 && !loading && (\r\n              suggestions.map((suggestion, index) => (\r\n                <li key={index} onClick={() => handleSuggestionClick(suggestion)} style={{ cursor: \"pointer\" }} >\r\n                  <div>\r\n                    <strong>{suggestion.suburb}</strong>, {suggestion.stateCode}{\" \"}\r\n                    ({suggestion.postcode})\r\n                  </div>\r\n                </li>\r\n              ))\r\n            )}\r\n          </ul>\r\n        </div>\r\n        </div>\r\n      </div>\r\n     \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LessonLocation;","import React, { useState, useEffect } from 'react';\r\nimport { apiPost } from \"../../..//utilities/axiosInstance\";\r\nimport API_ENDPOINTS from \"../../../utilities/apiEndPoints\";\r\nimport { useAuth } from \"../../../context/AuthContext\";\r\n\r\n\r\nconst TestLocation = ({testLocation, setTestLocation}) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const [isSuggestionSelected, setIsSuggestionSelected] = useState(true);\r\n  const [loading, setLoading] = useState(false);\r\n  const [noResults, setNoResults] = useState(false);\r\n  const [suggestions, setSuggestions] = useState([]);\r\n  const {  setSelectSearchValue } = useAuth();\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === 'Enter') {\r\n      setTestLocation([...testLocation, inputValue]);\r\n      setInputValue('');\r\n    }\r\n  };\r\n\r\n  const removeTab = (indexToRemove) => {\r\n    setTestLocation(testLocation.filter((tab, index) => tab.id !== indexToRemove));\r\n  };\r\n\r\n      useEffect(() => {\r\n        if (!isSuggestionSelected) {\r\n          const delayDebounceFn = setTimeout(() => {\r\n            fetchSuggestions(inputValue);\r\n          }, 500);\r\n    \r\n          return () => clearTimeout(delayDebounceFn);\r\n        }\r\n      }, [\r\n        inputValue, \r\n        isSuggestionSelected]);\r\n\r\n\r\n        const handleInputChange = (e) => {\r\n          const value = e.target.value;\r\n            setInputValue(value);\r\n            setIsSuggestionSelected(false);\r\n            if(e.target.value.length == 0){\r\n              setNoResults(false)\r\n              setLoading(false)\r\n              setSuggestions([]);\r\n            }\r\n        };\r\n    \r\n        const fetchSuggestions = async (query) => {\r\n          setLoading(true);\r\n          setNoResults(false);\r\n      \r\n          try {\r\n            const response = await apiPost(API_ENDPOINTS.FIND_SUBURBS, {\r\n              filter: query,\r\n            });\r\n      \r\n            if (response.success && response.data) {\r\n              const filteredSuggestions = response.data.filter((item) =>\r\n                [item.suburb, item.stateCode, item.postcode.toString()].some((field) =>\r\n                  field.toLowerCase().includes(query.toLowerCase())\r\n                )\r\n              );\r\n      \r\n              setNoResults(filteredSuggestions.length === 0);\r\n              setSuggestions(filteredSuggestions);\r\n            } else {\r\n              setSuggestions([]);\r\n              setNoResults(true);\r\n            }\r\n          } catch (error) {\r\n            console.error(\"Error fetching suggestions:\", error);\r\n            setSuggestions([]);\r\n            setNoResults(true);\r\n          } finally {\r\n            setLoading(false);\r\n          }\r\n        };\r\n    \r\n        const handleSuggestionClick = (suggestion) => {\r\n        //  setInputValue(`${suggestion.suburb}, ${suggestion.stateCode} (${suggestion.postcode})`);\r\n        setTestLocation([...testLocation, \r\n          {\r\n            id:suggestion.id,\r\n            name:`${suggestion.suburb}, ${suggestion.stateCode} (${suggestion.postcode})`,\r\n            postcode:suggestion.postcode,\r\n            statecode:suggestion.stateCode,\r\n            suburb:suggestion.suburb,\r\n          }\r\n        ]);\r\n          setInputValue('');\r\n          setIsSuggestionSelected(true);\r\n          setSuggestions([]);\r\n          setSelectSearchValue(true)\r\n        };\r\n\r\n  return (\r\n    <div className=\"container-fluid\" style={{ maxWidth: '1200px','padding':'0' }}>\r\n      <div className=\" rounded p-2 bg-white shadow-sm\" style={{border:'1px solid #000000'}}>\r\n        <div className=\"tabs-container location-tabs-container\">\r\n          {testLocation.map((tab, index) => (\r\n            <div\r\n              key={tab.id}\r\n              className=\"tab-item d-inline-flex align-items-center\" style={{'background':'#fff','border':'1px solid #d9d9d9'}}\r\n            >\r\n              <span className=\"tab-text\">{tab.name}</span>\r\n              <button\r\n                onClick={() => removeTab(tab.id)}\r\n                className=\"close-btn\"\r\n                aria-label=\"Remove tab\"\r\n              >\r\n                x\r\n              </button>\r\n            </div>\r\n          ))}\r\n          {/* <input\r\n            type=\"text\"\r\n            value={inputValue}\r\n            onChange={(e) => setInputValue(e.target.value)}\r\n            onKeyDown={handleKeyDown}\r\n            placeholder=\"\"\r\n            className=\"tab-input\"\r\n          /> */}\r\n          <div className=\"inputWrp position-relative\">\r\n          <input type=\"text\" placeholder=\"Enter your Test location area...\" value={inputValue} onChange={handleInputChange} onKeyDown={handleKeyDown} className=\"tab-input\"/>\r\n\r\n          <ul className=\"suggestions-list\">\r\n            {loading && <li>Loading...</li>}\r\n            {noResults && !loading && ( <li>No results found for \"{inputValue}\"</li> )}\r\n\r\n            {suggestions.length > 0 && !loading && (\r\n              suggestions.map((suggestion, index) => (\r\n                <li key={index} onClick={() => handleSuggestionClick(suggestion)} style={{ cursor: \"pointer\" }} >\r\n                  <div>\r\n                    <strong>{suggestion.suburb}</strong>, {suggestion.stateCode}{\" \"}\r\n                    ({suggestion.postcode})\r\n                  </div>\r\n                </li>\r\n              ))\r\n            )}\r\n          </ul>\r\n        </div>\r\n        </div>\r\n      </div>\r\n     \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TestLocation;","import React from 'react';\n\nfunction TimeSlotPicker({ timeSlot, previousEndTime, isDisabled, onTimeChange, onRemove }) {\n  const hours = Array.from({ length: 24 }, (_, i) => i.toString().padStart(2, '0'));\n  const minutes = Array.from({ length: 4 }, (_, i) => (i * 15).toString().padStart(2, '0'));\n\n  const getMinStartHour = () => {\n    if (!previousEndTime) return '00';\n    const [prevHour] = previousEndTime.split(':');\n    return prevHour;\n  };\n\n  const calculateEndTime = (startHour, startMinute) => {\n    const startDate = new Date();\n    startDate.setHours(parseInt(startHour), parseInt(startMinute));\n    \n    const endDate = new Date(startDate);\n    endDate.setMinutes(startDate.getMinutes() + 60);\n    \n    return {\n      hour: endDate.getHours().toString().padStart(2, '0'),\n      minute: endDate.getMinutes().toString().padStart(2, '0')\n    };\n  };\n\n  const isEndTimeValid = (hour, minute) => {\n    const [startHour, startMinute] = timeSlot.startTime.split(':');\n    const startDate = new Date();\n    startDate.setHours(parseInt(startHour), parseInt(startMinute));\n    \n    const endDate = new Date();\n    endDate.setHours(parseInt(hour), parseInt(minute));\n    \n    const diffInMinutes = (endDate.getTime() - startDate.getTime()) / (1000 * 60);\n    return diffInMinutes >= 60 && diffInMinutes <= 120;\n  };\n\n  const getMaxEndHour = () => {\n    const [startHour, startMinute] = timeSlot.startTime.split(':');\n    const startDate = new Date();\n    startDate.setHours(parseInt(startHour), parseInt(startMinute));\n    \n    const maxEndDate = new Date(startDate);\n    maxEndDate.setHours(startDate.getHours() + 2);\n    \n    return maxEndDate.getHours().toString().padStart(2, '0');\n  };\n\n  const handleStartTimeChange = (newHour, newMinute) => {\n    const newStartTime = `${newHour}:${newMinute}`;\n    const endTime = calculateEndTime(newHour, newMinute);\n    \n    onTimeChange({\n      startTime: newStartTime,\n      endTime: `${endTime.hour}:${endTime.minute}`\n    });\n  };\n\n  const maxEndHour = getMaxEndHour();\n\n  return (\n    <div className=\"time-slot-picker\">\n      <select\n        className=\"form-select\"\n        value={timeSlot.startTime.split(':')[0]}\n        disabled={isDisabled}\n        onChange={(e) => {\n          const [, minute] = timeSlot.startTime.split(':');\n          handleStartTimeChange(e.target.value, minute);\n        }}\n      >\n        {hours.map((hour, index) => (\n          <option\n            key={index}\n            value={hour}\n            disabled={parseInt(hour) < parseInt(getMinStartHour())}\n          >\n            {hour}\n          </option>\n        ))}\n      </select>\n      <span>:</span>\n      <select\n        className=\"form-select\"\n        value={timeSlot.startTime.split(':')[1]}\n        disabled={isDisabled}\n        onChange={(e) => {\n          const [hour] = timeSlot.startTime.split(':');\n          handleStartTimeChange(hour, e.target.value);\n        }}\n      >\n        {minutes.map((minute, index) => (\n          <option key={index} value={minute}>\n            {minute}\n          </option>\n        ))}\n      </select>\n      <span>-</span>\n      <select\n        className=\"form-select\"\n        value={timeSlot.endTime.split(':')[0]}\n        disabled={isDisabled}\n        onChange={(e) => {\n          const newHour = e.target.value;\n          const [, minute] = timeSlot.endTime.split(':');\n          if (isEndTimeValid(newHour, minute)) {\n            onTimeChange({\n              ...timeSlot,\n              endTime: `${newHour}:${minute}`\n            });\n          } else {\n            alert('End time must be between 1 and 2 hours after start time');\n          }\n        }}\n      >\n        {hours.map((hour, index) => {\n          const [startHour] = timeSlot.startTime.split(':');\n          const isDisabledHour = parseInt(hour) <= parseInt(startHour) || parseInt(hour) > parseInt(maxEndHour);\n          return (\n            <option\n              key={index}\n              value={hour}\n              disabled={isDisabledHour}\n            >\n              {hour}\n            </option>\n          );\n        })}\n      </select>\n      <span>:</span>\n      <select\n        className=\"form-select\"\n        value={timeSlot.endTime.split(':')[1]}\n        disabled={isDisabled}\n        onChange={(e) => {\n          const [hour] = timeSlot.endTime.split(':');\n          if (isEndTimeValid(hour, e.target.value)) {\n            onTimeChange({\n              ...timeSlot,\n              endTime: `${hour}:${e.target.value}`\n            });\n          } else {\n            alert('End time must be between 1 and 2 hours after start time');\n          }\n        }}\n      >\n        {minutes.map((minute, index) => {\n          const [endHour] = timeSlot.endTime.split(':');\n          const [startHour, startMinute] = timeSlot.startTime.split(':');\n          const isDisabledMinute = \n            (parseInt(endHour) === parseInt(startHour) + 2 && parseInt(minute) > parseInt(startMinute)) ||\n            (parseInt(endHour) === parseInt(startHour) + 1 && parseInt(minute) < parseInt(startMinute));\n          return (\n            <option\n              key={index}\n              value={minute}\n              disabled={isDisabledMinute}\n            >\n              {minute}\n            </option>\n          );\n        })}\n      </select>\n      <button\n        className=\"remove-slot-btn\"\n        onClick={onRemove}\n        disabled={isDisabled}\n      >\n        Remove >\n      </button>\n    </div>\n  );\n}\n\nexport default TimeSlotPicker;","import React from 'react';\nimport TimeSlotPicker from './TimeSlotPicker';\n\nfunction DayScheduler({ schedule, travelTime, onChange }) {\n  const calculateTotalHours = (timeSlots) => {\n    return timeSlots?.reduce((total, slot) => {\n      const [startHour, startMinute] = slot.startTime.split(':').map(Number);\n      const [endHour, endMinute] = slot.endTime.split(':').map(Number);\n      \n      const startInMinutes = startHour * 60 + startMinute;\n      const endInMinutes = endHour * 60 + endMinute;\n      \n      return total + (endInMinutes - startInMinutes) / 60;\n    }, 0);\n  };\n\n  const addTimeSlot = () => {\n    if (!schedule.timeSlots.length) {\n      // If no time slots exist, create initial time slot\n      const newTimeSlot = {\n        startTime: '09:00',\n        endTime: '10:00'\n      };\n      onChange({\n        ...schedule,\n        timeSlots: [newTimeSlot]\n      });\n      return;\n    }\n\n    const lastSlot = schedule.timeSlots[schedule.timeSlots.length - 1];\n    const [hour, minute] = lastSlot.endTime.split(':');\n    const startDate = new Date();\n    startDate.setHours(parseInt(hour), parseInt(minute) + travelTime);\n    \n    const endDate = new Date(startDate);\n    endDate.setMinutes(startDate.getMinutes() + 60);\n\n    const newStartTime = `${startDate.getHours().toString().padStart(2, '0')}:${startDate.getMinutes().toString().padStart(2, '0')}`;\n    const newEndTime = `${endDate.getHours().toString().padStart(2, '0')}:${endDate.getMinutes().toString().padStart(2, '0')}`;\n\n    const newTimeSlots = [...schedule.timeSlots, { startTime: newStartTime, endTime: newEndTime }];\n    if (calculateTotalHours(newTimeSlots) <= 10) {\n      onChange({\n        ...schedule,\n        timeSlots: newTimeSlots,\n      });\n    } else {\n      alert('Cannot add more time slots. Total duration cannot exceed 10 hours per day.');\n    }\n  };\n\n  const updateTimeSlot = (index, newTimeSlot) => {\n    const newTimeSlots = [...schedule.timeSlots];\n    newTimeSlots[index] = newTimeSlot;\n\n    const otherSlots = schedule.timeSlots.filter((_, i) => i !== index);\n    const otherSlotsHours = calculateTotalHours(otherSlots);\n\n    const [startHour, startMinute] = newTimeSlot.startTime.split(':').map(Number);\n    const [endHour, endMinute] = newTimeSlot.endTime.split(':').map(Number);\n    const startInMinutes = startHour * 60 + startMinute;\n    const endInMinutes = endHour * 60 + endMinute;\n    const newSlotHours = (endInMinutes - startInMinutes) / 60;\n\n    if (otherSlotsHours + newSlotHours > 10) {\n      alert('Cannot update time slot. Total duration cannot exceed 10 hours per day.');\n      return;\n    }\n\n    if (index < newTimeSlots.length - 1) {\n      const currentEndTime = newTimeSlot.endTime;\n      const [endHour, endMinute] = currentEndTime.split(':');\n      const nextStartDate = new Date();\n      nextStartDate.setHours(parseInt(endHour), parseInt(endMinute) + travelTime);\n\n      const nextEndDate = new Date(nextStartDate);\n      nextEndDate.setMinutes(nextStartDate.getMinutes() + 60);\n\n      newTimeSlots[index + 1] = {\n        startTime: `${nextStartDate.getHours().toString().padStart(2, '0')}:${nextStartDate.getMinutes().toString().padStart(2, '0')}`,\n        endTime: `${nextEndDate.getHours().toString().padStart(2, '0')}:${nextEndDate.getMinutes().toString().padStart(2, '0')}`\n      };\n    }\n\n    onChange({ ...schedule, timeSlots: newTimeSlots });\n  };\n\n  const removeTimeSlot = (index) => {\n    const newTimeSlots = schedule.timeSlots.filter((_, i) => i !== index);\n    onChange({ ...schedule, timeSlots: newTimeSlots });\n  };\n\n  const totalHours = calculateTotalHours(schedule.timeSlots);\n  const canAddMoreSlots = totalHours < 10;\n\n  return (\n    <div className=\"day-scheduler\">\n      <div className=\"d-flex align-items-center mb-3 align-content-start flex-wrap\">\n        <div className=\"form-check\">\n          <input\n            type=\"checkbox\"\n            className=\"form-check-input\"\n            checked={schedule.enabled}\n            onChange={(e) => onChange({ ...schedule, enabled: e.target.checked })}\n            id={`day-${schedule.day}`}\n          />\n          <label className=\"form-check-label\" htmlFor={`day-${schedule.day}`}>\n            {schedule.day}\n          </label>\n        </div>\n        {/* <span className=\"ms-3 text-muted\">\n          Total: {totalHours.toFixed(1)} hours\n        </span> */}\n        {/* {!canAddMoreSlots && schedule.enabled && (\n          <span className=\"ms-3 text-danger\">\n            Maximum 10 hours reached\n          </span>\n        )} */}\n      </div>\n      <div className='d-flex flex-column'>\n      {schedule.timeSlots?.map((timeSlot, index) => (\n        <TimeSlotPicker\n          key={index}\n          timeSlot={timeSlot}\n          previousEndTime={index > 0 ? schedule.timeSlots[index - 1].endTime : undefined}\n          isDisabled={!schedule.enabled}\n          onTimeChange={(newTimeSlot) => updateTimeSlot(index, newTimeSlot)}\n          onRemove={() => removeTimeSlot(index)}\n        />\n      ))}\n      \n      {schedule.enabled && canAddMoreSlots && (\n        <button\n          className=\"add-slot-btn\"\n          onClick={addTimeSlot}\n        >\n          Add Another Time Slot\n        </button>\n      )}\n      </div>\n    </div>\n  );\n}\n\nexport default DayScheduler;","import React, { useState, useEffect } from 'react';\r\nimport DayScheduler from './components/DayScheduler';\r\nimport Swal from \"sweetalert2\";\r\nimport API_ENDPOINTS from \"../../../../utilities/apiEndPoints\";\r\nimport { useAuth } from \"../../../../context/AuthContext\";\r\nimport axios from \"axios\";\r\n\r\nconst DAYS = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\r\nconst INTERVALS = [15, 30, 45, 60];\r\n\r\nconst formatTimeFromApi = (timeString) => {\r\n  return timeString.substring(0, 5);\r\n};\r\n\r\nconst getInitialSchedules = (availabilityData) => {\r\n  return DAYS.map(day => {\r\n    const dayData = availabilityData.find(d => d.day_name === day);\r\n    console.log(dayData)\r\n    if (dayData) {\r\n      return {\r\n        day,\r\n        enabled: true,\r\n        timeSlots: dayData.time_slots.map(slot => ({\r\n          startTime: formatTimeFromApi(slot.slot_start),\r\n          endTime: formatTimeFromApi(slot.slot_end)\r\n        }))\r\n      };\r\n    }\r\n    \r\n    return {\r\n      day,\r\n      enabled: false,\r\n      timeSlots: [\r\n        {\r\n          startTime: '07:00',\r\n          endTime: '08:00',\r\n        },\r\n      ],\r\n    };\r\n  });\r\n};\r\n\r\nfunction TimeSlot({\r\n  travelTime, \r\n  setTravelTime,\r\n  calenderView,\r\n  setCalenderView,\r\n  availability,\r\n  setAvailability,\r\n  lessonLocation,\r\n  testLocation\r\n}) {\r\n  const [schedules, setSchedules] = useState(() => getInitialSchedules(availability));\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const {token } = useAuth();\r\n\r\n  // Update schedules when availability prop changes\r\n  useEffect(() => {\r\n    setSchedules(getInitialSchedules(availability));\r\n    console.log(availability)\r\n  }, [availability, travelTime]);\r\n\r\n  useEffect(() => {\r\n    const updatedSchedules = schedules.map(schedule => {\r\n      if (!schedule.enabled) return schedule;\r\n\r\n      const updatedTimeSlots = schedule.timeSlots.reduce((acc, _, index) => {\r\n        if (index === 0) {\r\n          return [schedule.timeSlots[0]];\r\n        }\r\n\r\n        const previousSlot = acc[index - 1];\r\n        const [endHour, endMinute] = previousSlot.endTime.split(':');\r\n        const startDate = new Date();\r\n        startDate.setHours(parseInt(endHour), parseInt(endMinute) + travelTime);\r\n        \r\n        const endDate = new Date(startDate);\r\n        endDate.setMinutes(startDate.getMinutes() + 60);\r\n\r\n        return [...acc, {\r\n          startTime: `${startDate.getHours().toString().padStart(2, '0')}:${startDate.getMinutes().toString().padStart(2, '0')}`,\r\n          endTime: `${endDate.getHours().toString().padStart(2, '0')}:${endDate.getMinutes().toString().padStart(2, '0')}`\r\n        }];\r\n      }, []);\r\n\r\n      return {\r\n        ...schedule,\r\n        timeSlots: updatedTimeSlots\r\n      };\r\n    });\r\n\r\n    setSchedules(updatedSchedules);\r\n  }, [travelTime]);\r\n\r\n  const handleScheduleChange = (index, newSchedule) => {\r\n    const newSchedules = [...schedules];\r\n    newSchedules[index] = newSchedule;\r\n    setSchedules(newSchedules);\r\n    \r\n    // Update parent component's availability state\r\n    const newAvailability = newSchedules\r\n      .filter((schedule) => schedule.enabled)\r\n      .map((schedule) => ({\r\n        day_name: schedule.day,\r\n        time_slots: schedule.timeSlots.map(slot => ({\r\n          slot_start: `${slot.startTime}:00`,\r\n          slot_end: `${slot.endTime}:00`\r\n        }))\r\n      }));\r\n    \r\n    setAvailability(newAvailability);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    const newAvailability = schedules\r\n      .filter((schedule) => schedule.enabled)\r\n      .map((schedule) => ({\r\n        day_name: schedule.day,\r\n        time_slots: schedule.timeSlots.map(slot => ({\r\n          slot_start: `${slot.startTime}:00`,\r\n          slot_end: `${slot.endTime}:00`\r\n        }))\r\n      }));\r\n\r\n    setAvailability(newAvailability);\r\n    //console.log(travelTime,  calenderView,  availability, lessonLocation, testLocation)\r\n    updateTrainerAvailabilty()\r\n  };\r\n// form update\r\nconst updateTrainerAvailabilty =async ()=>{\r\n  \r\n    setIsLoading(true);\r\n    try {\r\n     \r\n      let config = {\r\n        method: 'post',\r\n        maxBodyLength: Infinity,\r\n        url:`${process.env.REACT_APP_API_BASE_URL}${API_ENDPOINTS.UPDATE_INSTRUCTOR_AREA_AVAILABILTY}`,\r\n        headers: { \r\n          'Authorization': `Bearer ${token}`, \r\n          'Content-Type': 'application/json', \r\n        },\r\n        data : {\r\n          \"travel_time\": travelTime,\r\n          \"calendar_view\": calenderView,\r\n          \"availability\": availability,\r\n          \"driving_lesson_locations\": lessonLocation,\r\n          \"test_lesson_locations\":testLocation\r\n        }\r\n      };\r\n      axios.request(config)\r\n        .then((response) => {\r\n         // console.log(JSON.stringify(response.data));\r\n          if(response.data.success){\r\n            Swal.fire(\r\n              \"Success!\",\r\n              `${response.data.message}`,\r\n              \"success\"\r\n            );\r\n          }\r\n          else{\r\n            Swal.fire(\r\n              \"Error!\",\r\n              `${response.data.error}`,\r\n              \"error\"\r\n            );\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          //console.log(error);\r\n          Swal.fire(\r\n            \"Error!\",\r\n            // `${error.response.data.time_interval[0]}`,\r\n            `${error.message}`,\r\n            \"error\"\r\n          );\r\n        });\r\n      \r\n    } catch (error) {\r\n      console.error(\"Error updating details:\", error);\r\n      Swal.fire(\r\n        \"Error!\",\r\n        \"An error occurred while updating details. Please try again.\",\r\n        \"error\"\r\n      );\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"weekly-scheduler\">\r\n      <div className=\"scheduler-container\">\r\n        <div className=\"mb-4\">\r\n          <label className=\"form-label\">\r\n            * Default Travel time between lessons\r\n          </label>\r\n          <select\r\n            className=\"form-select\"\r\n            value={travelTime}\r\n            onChange={(e) => setTravelTime(parseInt(e.target.value))}\r\n          >\r\n            {INTERVALS.map((interval) => (\r\n              <option key={interval} value={interval}>\r\n                {interval} minutes\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        {schedules.map((schedule, index) => (\r\n          <DayScheduler\r\n            key={schedule.day}\r\n            schedule={schedule}\r\n            travelTime={travelTime}\r\n            onChange={(newSchedule) => handleScheduleChange(index, newSchedule)}\r\n          />\r\n        ))}\r\n\r\n        <div className=\"mb-4\">\r\n          <label className=\"form-label\">\r\n            * Default Calendar View\r\n          </label>\r\n          <div className=\"d-flex\" style={{gap:'15px'}}>\r\n            <label className='d-flex' style={{gap:'10px'}}>\r\n              <input \r\n                type=\"radio\" \r\n                value=\"Day\" \r\n                name=\"calender-view\" \r\n                checked={calenderView === 'Day'} \r\n                onChange={(e) => setCalenderView(e.target.value)}\r\n              />\r\n              Day\r\n            </label>\r\n            <label className='d-flex' style={{gap:'10px'}}>\r\n              <input \r\n                type=\"radio\" \r\n                value=\"Week\" \r\n                name=\"calender-view\" \r\n                checked={calenderView === 'Week'} \r\n                onChange={(e) => setCalenderView(e.target.value)}\r\n              />\r\n              Week\r\n            </label>\r\n            <label className='d-flex' style={{gap:'10px'}}>\r\n              <input \r\n                type=\"radio\" \r\n                value=\"Month\" \r\n                name=\"calender-view\" \r\n                checked={calenderView === 'Month'} \r\n                onChange={(e) => setCalenderView(e.target.value)}\r\n              />\r\n              Month\r\n            </label>\r\n          </div>\r\n        </div>\r\n\r\n        <button\r\n          className=\"btn btn-teal submit-btn\"\r\n          onClick={handleSubmit}\r\n        >\r\n          SAVE CHANGES\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TimeSlot;","import React, {useState, useEffect} from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\n// import { Formik, Form, Field } from \"formik\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\n// import * as Yup from \"yup\";\r\nimport Swal from \"sweetalert2\";\r\nimport Breadcrumb from \"../Breadcrumb\";\r\nimport MapComponent from '../../../Components/GoogleMap';\r\nimport LessonLocation from './lessonLocation';\r\nimport TestLocation from './testLocation';\r\nimport TimeSlot from './timeSlot/timeSlot'\r\nimport axios from \"axios\";\r\n// import { apiGet, apiPost } from \"../../../utilities/axiosInstance\";\r\nimport API_ENDPOINTS from \"../../../utilities/apiEndPoints\";\r\nimport { useAuth } from \"../../../context/AuthContext\";\r\n\r\nexport default function ServiceAreaAvailability() {\r\n   const { userData, token } = useAuth();\r\n  const navigate = useNavigate();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n   const [locations, setLocations]= useState([]);\r\n   const [calenderView, setCalenderView] = useState('Day')\r\n   const [travelTime, setTravelTime] = useState(15);\r\n   const [lessonLocation, setLessonLocation] = useState([])\r\n   const [testLocation, setTestLocation] = useState([])\r\n   const [availability, setAvailability] = useState([])\r\n\r\n  //  useEffect(()=>{\r\n  //   const fetchInstructorDetails = async () => {\r\n  //     setIsLoading(true);\r\n  //     try {\r\n  //       const response = await apiGet(\r\n  //         `${API_ENDPOINTS.INSTRUCTOR_AREA_AVAILIBLITY}?instructor_id=${userData.id}`\r\n  //       );\r\n  //       if (response.success) {\r\n  //         const data = response.data;\r\n  //       }\r\n  //     } catch (error) {\r\n  //       console.error(\"Error fetching instructor details:\", error);\r\n  //     } finally {\r\n  //       setIsLoading(false);\r\n  //     }\r\n  //   };\r\n\r\n  //   fetchInstructorDetails();\r\n  //  },[])\r\n\r\n\r\n  useEffect(()=>{\r\n    const fetchInstructorDetails = async () => {\r\n      setIsLoading(true);\r\n      try {\r\n        const response = await axios({\r\n          method: 'get',\r\n          url: `${process.env.REACT_APP_API_BASE_URL}${API_ENDPOINTS.INSTRUCTOR_AREA_AVAILIBLITY}`,\r\n          headers: { \r\n            'Authorization': `Bearer ${token}`,\r\n            'Content-Type': 'application/json'\r\n          },\r\n          params: {\r\n            instructor_id: userData.id\r\n          }\r\n        });\r\n\r\n        if (response.data.success) {\r\n          const { data } = response.data;\r\n          setLocations(data.driving_postcodes || []); // Assuming the API returns locations data\r\n          setCalenderView(data.default_calendar_view || 'Day');\r\n          setTravelTime(data.default_travel_time || 15);\r\n          setLessonLocation(data.driving_lesson_locations || []);\r\n          setTestLocation(data.test_lesson_locations || [])\r\n          setAvailability(data.availability || [])\r\n         \r\n        } else {\r\n          throw new Error(response.data.message || 'Failed to fetch instructor details');\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching instructor details:\", error);\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Error',\r\n          text: error.response?.data?.message || error.message || 'Failed to fetch instructor details',\r\n        });\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchInstructorDetails();\r\n   },[userData.id])\r\n\r\n   \r\n\r\n  return (\r\n    <div className=\"mainContent\">\r\n      <Breadcrumb />\r\n      <div className=\"mainContent__assets\">\r\n        <Container>\r\n          <Row>\r\n            <Col lg={12}>\r\n              <div className=\"personalDetailsForm\">\r\n                <div className=\"secIntro mb-0\">\r\n                  <div className=\"secIntro__left\">\r\n                    <Link className=\"mb-2\" onClick={() => navigate(-1)}>&lt; Go back </Link>\r\n                    <h2 className=\"mb-0\">Service Area & Availability</h2>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"bookingCard\">\r\n                  <div className=\"bookingCard__top\">\r\n                    <h4>Service Area</h4>\r\n                  </div>\r\n                  <div className=\"bookingCard__mid flex-column gap-3 \">\r\n                    <p>\r\n                     Learners in your chosen area will be to view your profile and book a lesson with you. You can add and remove suburb set any time.\r\n                    </p>\r\n                  </div>\r\n                  <div className=\"bookingCard__mid \">\r\n                     <MapComponent locations={locations}/>\r\n                  </div>\r\n                  <div className=\"bookingCard__mid \">\r\n                    <h4>You are servicing {lessonLocation.length} suburbs </h4>\r\n                    </div>\r\n                  <div className=\"bookingCard__mid \" style={{paddingTop:'0'}}>\r\n                    <LessonLocation \r\n                    lessonLocation={lessonLocation} \r\n                    setLessonLocation={setLessonLocation}\r\n                    />\r\n                  </div>\r\n                  <div className=\"bookingCard__mid \">\r\n                    <h4>Driving Test Locations</h4>\r\n                  </div>\r\n                  <div className=\"bookingCard__mid \" style={{paddingTop:'0'}}>\r\n                    <TestLocation \r\n                    testLocation={testLocation}\r\n                    setTestLocation={setTestLocation}\r\n                    />\r\n                  </div>\r\n                  <div className=\"bookingCard__top\"><h4>Availability</h4></div>\r\n                  <div className=\"bookingCard__mid \">\r\n                    <p>\r\n                    To show your live availability to new learners, we first need to know your operating hours. Please define your current business hours. You can update your operating hours at any time.\r\n                    </p>\r\n                  </div>\r\n                  <div className=\"bookingCard__mid \">\r\n                    <h4>* Your operating hours</h4>\r\n                  </div>\r\n                  <div className=\"bookingCard__mid \" style={{paddingTop:'0'}}>\r\n                    <p>\r\n                    The management of your real-time availability within your operating hours is handled via your Licence Now calendar, which you'll gain access to once you've completed the signup process. Before we begin displaying your live availability to learners, you'll need to update your Licence Now calendar with all your existing bookings to avoid double bookings. Your Licence Now calendar should be updated whenever you make new bookings or modify existing ones. You only need to include the duration of the lessons, not any learner details. We also provide the option to specify travel times between lessons.</p>\r\n                  </div>\r\n                  <div className=\"bookingCard__mid \" style={{paddingTop:'0'}}>\r\n                    {availability.length > 0? \r\n                  <TimeSlot \r\n                  availability={availability}\r\n                  setAvailability={setAvailability}\r\n                  travelTime={travelTime} \r\n                  setTravelTime={ setTravelTime}\r\n                  calenderView={calenderView} \r\n                  setCalenderView={setCalenderView}\r\n                  lessonLocation={lessonLocation} \r\n                  testLocation={testLocation}\r\n                  />\r\n                  :\r\n                  <TimeSlot \r\n                  availability={availability}\r\n                  setAvailability={setAvailability}\r\n                  travelTime={travelTime} \r\n                  setTravelTime={ setTravelTime}\r\n                  calenderView={calenderView} \r\n                  setCalenderView={setCalenderView}\r\n                  lessonLocation={lessonLocation} \r\n                  testLocation={testLocation}\r\n                  />\r\n                  }\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["_ref","locations","mapRef","useRef","map","setMap","useState","circles","setCircles","useEffect","window","google","maps","current","Map","center","lat","lng","zoom","script","document","createElement","src","async","onerror","console","log","onload","head","appendChild","removeChild","length","geocoder","Geocoder","geocode","request","callback","error","forEach","circle","newCircles","bounds","LatLngBounds","pincode","index","address","toString","results","status","coords","geometry","location","Circle","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","radius","push","prevCircles","extend","fitBounds","setZoom","setCenter","_jsx","style","height","width","ref","Breadcrumb","pathSegments","useLocation","pathname","split","filter","Boolean","pop","breadcrumbs","segment","secondLastSegment","lastSegment","className","children","_jsxs","Link","to","homeIco","alt","replace","lessonLocation","setLessonLocation","inputValue","setInputValue","isSuggestionSelected","setIsSuggestionSelected","loading","setLoading","noResults","setNoResults","suggestions","setSuggestions","setSelectSearchValue","useAuth","delayDebounceFn","setTimeout","fetchSuggestions","clearTimeout","response","apiPost","API_ENDPOINTS","FIND_SUBURBS","query","success","data","filteredSuggestions","item","suburb","stateCode","postcode","some","field","toLowerCase","includes","maxWidth","border","tab","name","onClick","removeTab","indexToRemove","id","type","placeholder","value","onChange","e","target","onKeyDown","key","suggestion","statecode","handleSuggestionClick","cursor","testLocation","setTestLocation","timeSlot","previousEndTime","isDisabled","onTimeChange","onRemove","hours","Array","from","_","i","padStart","minutes","getMinStartHour","prevHour","isEndTimeValid","hour","minute","startHour","startMinute","startTime","startDate","Date","setHours","parseInt","endDate","diffInMinutes","getTime","handleStartTimeChange","newHour","newMinute","newStartTime","endTime","calculateEndTime","setMinutes","getMinutes","getHours","maxEndHour","getMaxEndHour","maxEndDate","disabled","alert","isDisabledHour","endHour","isDisabledMinute","_schedule$timeSlots","schedule","travelTime","calculateTotalHours","timeSlots","reduce","total","slot","Number","endMinute","canAddMoreSlots","checked","enabled","day","htmlFor","TimeSlotPicker","undefined","newTimeSlot","updateTimeSlot","newTimeSlots","otherSlots","otherSlotsHours","currentEndTime","nextStartDate","nextEndDate","removeTimeSlot","addTimeSlot","lastSlot","newEndTime","DAYS","INTERVALS","formatTimeFromApi","timeString","substring","getInitialSchedules","availabilityData","dayData","find","d","day_name","time_slots","slot_start","slot_end","setTravelTime","calenderView","setCalenderView","availability","setAvailability","schedules","setSchedules","isLoading","setIsLoading","token","updatedSchedules","updatedTimeSlots","acc","previousSlot","updateTrainerAvailabilty","config","method","maxBodyLength","Infinity","url","UPDATE_INSTRUCTOR_AREA_AVAILABILTY","headers","axios","then","Swal","message","catch","interval","DayScheduler","newSchedule","handleScheduleChange","newSchedules","newAvailability","gap","handleSubmit","ServiceAreaAvailability","userData","navigate","useNavigate","setLocations","INSTRUCTOR_AREA_AVAILIBLITY","params","instructor_id","Error","driving_postcodes","default_calendar_view","default_travel_time","driving_lesson_locations","test_lesson_locations","_error$response","_error$response$data","icon","title","text","fetchInstructorDetails","Container","Row","Col","lg","MapComponent","paddingTop","LessonLocation","TestLocation","TimeSlot"],"sourceRoot":""}