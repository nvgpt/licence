{"version":3,"file":"static/js/9217.057b1460.chunk.js","mappings":"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","sources":["Components/ResetPassword.jsx"],"sourcesContent":["import React, {useState} from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport loginSide from \"../assets/images/loginSide.png\"; // Image for side section\r\nimport logo from \"../assets/images/logo.svg\"; // Logo image\r\nimport { Formik, Field, Form, ErrorMessage, useFormik } from \"formik\"; // Import Formik\r\nimport * as Yup from \"yup\"; // Import Yup for validation\r\nimport { Link, useNavigate, useLocation, useSearchParams   } from \"react-router-dom\"; // Import useNavigate for redirecting\r\nimport { apiPost } from \"../utilities/axiosInstance\"; // Assuming apiPost is set up for POST requests\r\nimport API_ENDPOINTS from \"../utilities/apiEndPoints\"; // Your API endpoints\r\nimport Swal from \"sweetalert2\"; // Import SweetAlert2 for notifications\r\nimport axios from \"axios\";\r\n\r\n// Logo Section Component (Left Side)\r\nconst LoginSideImage = () => (\r\n  <div className=\"LoginFormWrp__left\">\r\n    <img src={loginSide} alt=\"Login Side\" />\r\n    <div className=\"LoginFormWrp__logo\">\r\n      <img src={logo} alt=\"logo\" />\r\n    </div>\r\n  </div>\r\n);\r\n\r\n// Main Login Component\r\nexport default function ResetPassword(){\r\n    const navigate = useNavigate();\r\n  const [loading, setLoading] = useState(false);\r\n  const [paramtoken, setParamtoken]= useState();\r\n  const [userType, setUserType]=useState();\r\n\r\n\r\n  \r\n  const ResetPassword = () => {\r\n    const [searchParams] = useSearchParams();\r\n    const fullToken = searchParams.get(\"token\"); // Extract token from URL\r\n  \r\n    // Split the token into `token` and `userType`\r\n    const [token, userType] = fullToken ? fullToken.split(\"|\") : [\"\", \"\"];\r\n  \r\n   // console.log(\"Token:\", token);\r\n  // console.log(fullToken)\r\n    setParamtoken(fullToken)\r\n    setUserType(userType)\r\n    //console.log(\"User Type:\", userType);\r\n  };\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true, // âœ… Allow form to reinitialize when values change\r\n        initialValues: {\r\n          password:'',\r\n          password_confirmation:''\r\n        },\r\n        validationSchema: Yup.object({\r\n          password:Yup.string().required(\"Password is required\"),\r\n          password_confirmation:Yup.string().required(\"Confirm Password is required\").oneOf([Yup.ref(\"password\"), null], \"Passwords must match\"),\r\n    \r\n        }),\r\n        onSubmit: async (values) => {//handleLocalData\r\n          const payload = {\r\n            password:values.password,\r\n            password_confirmation:values.password_confirmation,\r\n            token:paramtoken,\r\n          };\r\n    \r\n          try {\r\n        \r\n            setLoading(true);\r\n            // Make the API call\r\n           // console.log(payload)\r\n            const response = await axios.post(\r\n              `${process.env.REACT_APP_API_BASE_URL || \"https://ready-set-driving-school.pwd.net.au\"}${API_ENDPOINTS.RESET_PASSWORD}`,\r\n              payload,\r\n              { headers: { \"Content-Type\": \"application/json\", }, }\r\n            );\r\n        \r\n            console.log(\"API Response:\", response.data.message);\r\n        \r\n            if (!response.data.success) {\r\n              Swal.fire({\r\n                        icon: \"error\",\r\n                        title: 'Invalid Token',\r\n                        text: `\"Invalid Token\"`,\r\n                        confirmButtonText: \"Try Again\",\r\n                      });\r\n             \r\n              return;\r\n            }\r\n      else{\r\n      Swal.fire({\r\n                icon: \"success\",\r\n                title: \"Success!\",\r\n                text: `${response.data.message}!`,\r\n                confirmButtonText: \"Try Login now\",\r\n              }).then(() => {\r\n                if(userType === 'instructor'){\r\n                    navigate(\"/instructor-login\");\r\n                }\r\n                else{\r\n                    navigate(\"/learner-login\");\r\n                }\r\n                // navigate(\"/\");\r\n              });\r\n           // console.log(bookNowResponse, clientSecret)\r\n           }       \r\n            // Additional logic here if required (e.g., handling Stripe payment)\r\n          } catch (error) {\r\n                          console.error(\"API call error:\", error.response.data.message);\r\n                          // Handle Axios errors\r\n                          if (error.response) {\r\n                            Swal.fire({\r\n                                icon: \"error\",\r\n                                title: 'Invalid Response',\r\n                                text: error?.response?.data?.message ||\r\n                                error.response.statusText ||\r\n                                \"An error occurred with the request.\",\r\n                                confirmButtonText: \"Try Again\",\r\n                              });\r\n                                          \r\n                          } else if (error.request) {\r\n                            Swal.fire({\r\n                                icon: \"error\",\r\n                                title: 'Invalid Response',\r\n                                text: error.request.data?.data.error ||\r\n                                error.response.statusText ||\r\n                                \"No response received from the server. Please try again.\",\r\n                                confirmButtonText: \"Try Again\",\r\n                              });\r\n                          } else {\r\n                            Swal.fire({\r\n                                icon: \"error\",\r\n                                title: 'Invalid Response',\r\n                                text: \r\n                                \"An unexpected error occurred. Please try again.\",\r\n                                confirmButtonText: \"Try Again\",\r\n                              });\r\n                                            \r\n                          }\r\n          } finally {\r\n           \r\n            setLoading(false);\r\n          }\r\n    //console.log(payload)\r\n        },\r\n      });\r\n\r\n\r\n\r\n  // Handle form submission and API call\r\n//   const handleSubmit = async (values) => {\r\n//     setLoading(true);\r\n//     const { email } = values;\r\n\r\n//     try {\r\n//       const response = await apiPost(API_ENDPOINTS.FORGOT_PASSWORD, {\r\n//         email,\r\n//         \"user_type\": \"learner\",\r\n//       });\r\n// console.log(response)\r\n//       if (response?.success) {\r\n//          // Show SweetAlert for success\r\n//         Swal.fire({\r\n//           icon: \"success\",\r\n//           title: \"Welcome!\",\r\n//           text: `Welcome, ${response.message}!`,\r\n//           confirmButtonText: \"Okay\",\r\n//         }).then(() => {\r\n//           navigate(\"/\");\r\n//         });\r\n//       } else {\r\n//         //throw new Error(response)\r\n//         Swal.fire({\r\n//           icon: \"error\",\r\n//           title: 'Invalid Email id',\r\n//           text: \"Invalid EMail ID\",\r\n//           confirmButtonText: \"Try Again\",\r\n//         });\r\n//       }\r\n//     } catch (error) {\r\n//       // Log the full error to understand its structure\r\n//       //console.log(error?.message)\r\n//       const errorMessage = error?.message;\r\n//       // Set the error message for display in the UI\r\n//       setError(errorMessage);\r\n//       // Show a SweetAlert popup with the correct error message\r\n//       Swal.fire({\r\n//         icon: \"error\",\r\n//         title: errorMessage,\r\n//         text: error.error,\r\n//         confirmButtonText: \"Try Again\",\r\n//       });\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n    \r\n//   };\r\n\r\n\r\n\r\nreturn (\r\n  <Container>\r\n    <Row>\r\n      <Col lg={12}>\r\n        <div className=\"LoginFormWrp d-flex\">\r\n          <LoginSideImage />\r\n          <div className=\"LoginFormWrp__right\">\r\n            <h2>Reset Password</h2>\r\n             \r\n                   <ResetPassword />\r\n                            \r\n            <form className=\"LoginFormWrp__form d-flex flex-column\"  onSubmit={formik.handleSubmit}>\r\n                <div className=\"RegistrationForm__field\">\r\n                <label htmlFor=\"*Password\" style={{letterSpacing:'1px',fontWeight:'300'}}>*Password</label>\r\n                <input type=\"password\" name=\"password\" id=\"password\" value={formik.values.password} style={{border:'1px solid #fff'}}\r\n                onChange={formik.handleChange} onBlur={formik.handleBlur}    \r\n                />\r\n                {formik.touched.password && formik.errors.password && (<div style={{ color: \"red\",marginTop:'0px' }}>{formik.errors.password}</div>)}\r\n                </div>\r\n\r\n                <div className=\"RegistrationForm__field\">\r\n                <label htmlFor=\"*Password\" style={{letterSpacing:'1px',fontWeight:'300'}}>*Re enter Password</label>\r\n                <input type=\"password\" name=\"password_confirmation\" id=\"password_confirmation\" value={formik.values.password_confirmation} style={{border:'1px solid #fff'}}\r\n                onChange={formik.handleChange} onBlur={formik.handleBlur}  \r\n                />\r\n                {formik.touched.password_confirmation && formik.errors.password_confirmation && (<div style={{ color: \"red\",marginTop:'0px' }}>{formik.errors.password_confirmation}</div>)}\r\n                \r\n                </div>\r\n            \r\n                                <div className=\"d-flex flex-column gap-3 LoginFormWrp__btnWrp\">\r\n                                  <button type=\"submit\" className=\"btn btn-white has-hover-blue\" disabled={loading}>\r\n                                    {loading ? \"Updating...\" : \"Update >\"}\r\n                                  </button>\r\n                                </div>\r\n            </form>\r\n                          \r\n          </div>\r\n        </div>\r\n      </Col>\r\n    </Row>\r\n  </Container>\r\n);\r\n}\r\n\r\n"],"names":["LoginSideImage","_jsxs","className","children","_jsx","src","loginSide","alt","logo","ResetPassword","navigate","useNavigate","loading","setLoading","useState","paramtoken","setParamtoken","userType","setUserType","searchParams","useSearchParams","fullToken","get","token","split","formik","useFormik","enableReinitialize","initialValues","password","password_confirmation","validationSchema","Yup","required","oneOf","onSubmit","async","payload","values","response","axios","post","API_ENDPOINTS","RESET_PASSWORD","headers","console","log","data","message","success","Swal","icon","title","text","confirmButtonText","then","error","_error$response","_error$response$data","statusText","request","_error$request$data","Container","Row","Col","lg","handleSubmit","htmlFor","style","letterSpacing","fontWeight","type","name","id","value","border","onChange","handleChange","onBlur","handleBlur","touched","errors","color","marginTop","disabled"],"sourceRoot":""}