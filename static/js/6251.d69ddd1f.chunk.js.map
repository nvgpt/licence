{"version":3,"file":"static/js/6251.d69ddd1f.chunk.js","mappings":"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","sources":["Components/InstructorLogin.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport loginSide from \"../assets/images/ins-img.png\"; // Image for side section\r\nimport logo from \"../assets/images/logo.svg\"; // Logo image\r\nimport { Link, useNavigate } from \"react-router-dom\"; // Import useNavigate for redirecting\r\nimport { apiPost } from \"../utilities/axiosInstance\"; // Assuming apiPost is set up for POST requests\r\nimport API_ENDPOINTS from \"../utilities/apiEndPoints\"; // Your API endpoints\r\nimport Swal from \"sweetalert2\"; // Import SweetAlert2 for notifications\r\nimport { useAuth } from \"../context/AuthContext\";\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\"; // Import Formik\r\nimport * as Yup from \"yup\"; // Import Yup for validation\r\n\r\nfunction InstructorLogin() {\r\n  const { setRole, setUserData, setToken } = useAuth();\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [error, setError] = useState(null); // To capture any error during form submission\r\n\r\n  // Check if user is already logged in when the component mounts\r\n  useEffect(() => {\r\n    const authToken = sessionStorage.getItem(\"authToken\");\r\n    if (authToken) {\r\n      // If user is logged in, redirect to the profile page\r\n      navigate(\"/instructor/dashboard\");\r\n    }\r\n  }, [navigate]);\r\n\r\n  // Validation schema for Formik\r\n  const validationSchema = Yup.object({\r\n    email: Yup.string()\r\n      .email(\"Please enter a valid email address.\")\r\n      .required(\"Email is required.\"),\r\n    password: Yup.string()\r\n      // .min(6, \"Password should be at least 6 characters.\")\r\n      .required(\"Password is required.\"),\r\n    agreeToTerms: Yup.bool()\r\n      .oneOf([true], \"You must agree to the terms and conditions.\")\r\n      .required(\"Agreement is required.\"),\r\n  });\r\n\r\n  // Handle form submission and API call\r\n  const handleSubmit = async (values) => {\r\n    setLoading(true);\r\n\r\n    const { email, password, agreeToTerms } = values;\r\n\r\n    try {\r\n      const response = await apiPost(API_ENDPOINTS.INSTRUCTOR_LOGIN, {\r\n        email,\r\n        password,\r\n      });\r\n\r\n      if (response?.success) {\r\n        // Store token and user details\r\n        sessionStorage.setItem(\"authToken\", response.data.token);\r\n        sessionStorage.setItem(\r\n          \"userDetails\",\r\n          JSON.stringify(response.data.userDetails)\r\n        );\r\n        sessionStorage.setItem(\"role\", \"trainer\");\r\n        sessionStorage.setItem(\"profileImg\",response.data.userDetails.profile_image)\r\n        sessionStorage.setItem(\"profileName\",response.data.userDetails.first_name)\r\n        setRole(\"trainer\");\r\n        setToken(response.data.token);\r\n        setUserData(response.data.userDetails);\r\n\r\n        // Show SweetAlert for success\r\n        Swal.fire({\r\n          icon: \"success\",\r\n          title: \"Welcome!\",\r\n          text: `Welcome, ${response.data.userDetails.first_name}!`,\r\n          confirmButtonText: \"Okay\",\r\n        }).then(() => {\r\n          navigate(\"/instructor/dashboard\");\r\n        });\r\n      } else {\r\n        throw new Error(response);\r\n      }\r\n    } catch (error) {\r\n      // Log the full error to understand its structure\r\n      const errorMessage = error?.message;\r\n      // Set the error message for display in the UI\r\n      setError(errorMessage);\r\n      // Show a SweetAlert popup with the correct error message\r\n      Swal.fire({\r\n        icon: \"error\",\r\n        title: \"Login Failed\",\r\n        text: errorMessage,\r\n        confirmButtonText: \"Try Again\",\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col lg={12}>\r\n          <div className=\"LoginFormWrp d-flex\">\r\n            <div className=\"LoginFormWrp__left\">\r\n              <img src={loginSide} alt=\"Login Side\" />\r\n              <div className=\"LoginFormWrp__logo\">\r\n                <img src={logo} alt=\"logo\" />\r\n              </div>\r\n            </div>\r\n            <div className=\"LoginFormWrp__right InstructorLogin__right\">\r\n              <div>\r\n                <h2>Instructor Login</h2>\r\n                <p>\r\n                  Want to become an Instructor with Us?\r\n                  <Link to=\"/instructor-registration\"> Register Now!</Link>\r\n                </p>\r\n              </div>\r\n\r\n              {/* Formik Form */}\r\n              <Formik\r\n                initialValues={{\r\n                  email: \"\",\r\n                  password: \"\",\r\n                  agreeToTerms: false,\r\n                }}\r\n                validationSchema={validationSchema}\r\n                onSubmit={handleSubmit}\r\n              >\r\n                {({ setFieldValue, isSubmitting }) => (\r\n                  <Form className=\"LoginFormWrp__form d-flex flex-column\">\r\n                    <div className=\"form-group\">\r\n                      <label htmlFor=\"email\">* Your Email</label>\r\n                      <Field\r\n                        type=\"email\"\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Enter your email...\"\r\n                      />\r\n                      <ErrorMessage\r\n                        name=\"email\"\r\n                        component=\"div\"\r\n                        className=\"error-message\"\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                      <label htmlFor=\"password\">* Your Password</label>\r\n                      <Field\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        name=\"password\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Enter your password...\"\r\n                      />\r\n                      <ErrorMessage\r\n                        name=\"password\"\r\n                        component=\"div\"\r\n                        className=\"error-message\"\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                      <label className=\"d-flex align-items-start gap-2\">\r\n                        <Field\r\n                          type=\"checkbox\"\r\n                          name=\"agreeToTerms\"\r\n                          id=\"agreeToTerms\"\r\n                        />\r\n                        <div className=\"CheckboxHighlight\"></div>\r\n                        <p>\r\n                          I agree to the{\" \"}\r\n                          <Link to=\"/instructor-terms\">\r\n                            terms and conditions\r\n                          </Link>\r\n                        </p>\r\n                      </label>\r\n                      <ErrorMessage\r\n                        name=\"agreeToTerms\"\r\n                        component=\"div\"\r\n                        className=\"error-message\"\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"d-flex flex-column gap-3 LoginFormWrp__btnWrp\">\r\n                      <button\r\n                        type=\"submit\"\r\n                        className=\"btn btn-white has-hover-blue\"\r\n                        disabled={isSubmitting || loading}\r\n                        style={{ maxWidth: \"100%\", width: \"100%\" }}\r\n                      >\r\n                        {loading ? \"Logging in...\" : \"Login >\"}\r\n                      </button>\r\n                    </div>\r\n                  </Form>\r\n                )}\r\n              </Formik>\r\n              <div className=\"\">Forgot Password?<Link to=\"/instructor-forget-password\"> click here..</Link></div>\r\n            </div>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default InstructorLogin;\r\n"],"names":["setRole","setUserData","setToken","useAuth","navigate","useNavigate","loading","setLoading","React","error","setError","useState","useEffect","sessionStorage","getItem","validationSchema","Yup","email","required","password","agreeToTerms","oneOf","_jsx","Container","children","Row","Col","lg","_jsxs","className","src","loginSide","alt","logo","Link","to","Formik","initialValues","onSubmit","async","values","response","apiPost","API_ENDPOINTS","INSTRUCTOR_LOGIN","success","Error","setItem","data","token","JSON","stringify","userDetails","profile_image","first_name","Swal","icon","title","text","confirmButtonText","then","errorMessage","message","_ref","setFieldValue","isSubmitting","Form","htmlFor","Field","type","id","name","placeholder","ErrorMessage","component","disabled","style","maxWidth","width"],"sourceRoot":""}