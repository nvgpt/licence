{"version":3,"file":"static/js/5063.f6c98ec9.chunk.js","mappings":"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","sources":["Trainer/Components/Breadcrumb.jsx","Trainer/Components/calendar/NewBookingProposal.js"],"sourcesContent":["import React from \"react\";\r\nimport { useLocation, Link } from \"react-router-dom\";\r\nimport homeIco from \"../../assets/images/home.svg\";\r\n\r\nexport default function Breadcrumb() {\r\n  const location = useLocation();\r\n  const pathSegments = location.pathname.split(\"/\").filter(Boolean); // Split and clean the path\r\n\r\n  // Determine if it's a 'trainer' path, which should be ignored in the breadcrumb\r\n  const isTrainerPage = pathSegments[0] === \"instructor\";\r\n\r\n  // If it's a 'learner-list-details' page, redirect to 'learner-list'\r\n  if (pathSegments[1] === \"learner-list-details\" && pathSegments.length > 2) {\r\n    pathSegments[1] = \"learner-list\"; // Modify to 'learner-list'\r\n    pathSegments.pop(); // Remove the last segment (id like 1)\r\n  }\r\n\r\n  // If 'trainer' is in the path, skip it and take 'dashboard' instead\r\n  const breadcrumbs = pathSegments\r\n    .filter(segment => segment !== \"instructor\") // Remove 'trainer' from breadcrumbs\r\n    .map((segment, index) => {\r\n      if (segment === \"dashboard\" && index === 0) {\r\n        // Avoid showing 'Dashboard' in breadcrumb if it's the root page\r\n        return null;\r\n      }\r\n      return segment;\r\n    })\r\n    .filter(Boolean); // Filter out any null values (to avoid empty breadcrumb)\r\n\r\n  const secondLastSegment = breadcrumbs[breadcrumbs.length - 2];\r\n  const lastSegment = breadcrumbs[breadcrumbs.length - 1];\r\n\r\n  return (\r\n    <div className=\"breadcrumb\">\r\n      <p>\r\n        {breadcrumbs.length > 0 && (\r\n          <Link to=\"/instructor/dashboard\">\r\n            <img src={homeIco} alt=\"Home\" />\r\n          </Link>\r\n        )}\r\n        {secondLastSegment && (\r\n          <span>\r\n            &gt; &nbsp;\r\n            <Link to={`/instructor/${secondLastSegment}`}>\r\n              {secondLastSegment.replace(/-/g, \" \")} {/* Optional: Replace hyphens with spaces */}\r\n            </Link>\r\n          </span>\r\n        )}\r\n        {lastSegment && (\r\n          <span>\r\n            &gt; &nbsp;\r\n            {lastSegment.replace(/-/g, \" \")} {/* Last segment, no link */}\r\n          </span>\r\n        )}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React, {useState, useEffect} from \"react\";\r\nimport Breadcrumb from \"../Breadcrumb\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\n//import { useFormik } from \"formik\";\r\n//import * as Yup from \"yup\"; // For validation\r\nimport Swal from \"sweetalert2\"; \r\nimport axios from \"axios\";\r\n\r\n//import { useLocation } from \"react-router-dom\";\r\n\r\nimport Loader from \"../../../Components/Loader\";\r\nimport { apiGet, axiosWithAuth } from \"../../../utilities/axiosInstance\";\r\nimport { useAuth } from \"../../../context/AuthContext\";\r\nimport API_ENDPOINTS from \"../../../utilities/apiEndPoints\";\r\n\r\nexport default function NewBooking() {\r\n const location = useLocation();\r\n const navigate = useNavigate();\r\n// console.log(location.state?.id)\r\n\r\n  const {  userData, token } = useAuth();\r\n  const [isLoading, setIsLoading]= useState(false);\r\n \r\nconst [learnerList, setLearnerList]= useState([])\r\nconst [learnerId, setLearnerId] = useState()\r\nconst [bookingType, setBookingType] = useState();\r\nconst [trainerAvail, setTrainerAvail]= useState([]);\r\nconst [learnerAddress, setLearnerAddress]=useState('');\r\nconst [bookingDate, setBookingDate]= useState('');\r\nconst [bookingTime, setBookingTime] = useState('');\r\n \r\n\r\n\r\nuseEffect(() => {\r\n    \r\n  const fetchLearnerStudent = async () => {\r\n    setIsLoading(true)\r\n    try {\r\n    const authInstance = axiosWithAuth(token); // Pass the token to create the instance\r\n    const responseNew = await authInstance.post(API_ENDPOINTS.YOUR_LEARNER_STUDENTS);\r\n     const response = await responseNew.data\r\n  // console.log(response)\r\n      if (response.success && response.data) {\r\n        setIsLoading(false)\r\n        // console.log(response.data)\r\n        setLearnerList(response.data)\r\n        setLearnerId(location.state?.id || response.data[0].id)\r\n        setLearnerAddress(location.state?.address ||response.data[0].address)\r\n        // setFilteredLearnersList(response.data)\r\n       \r\n      } else {\r\n        console.error(\"Unexpected response format:\", response);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n    }\r\n  };\r\n  fetchLearnerStudent();\r\n},[])\r\n\r\nconst changeLearnerId = (e) => {\r\n  const selectedOption = e.target.selectedOptions[0];\r\n  const address = selectedOption.getAttribute('address');\r\n  //console.log(address)\r\n  setLearnerId(e.target.value);\r\n  setLearnerAddress(address); // Update the learnerAddress state with the selected address\r\n}\r\nconst changeBookType =(val)=>{\r\n//console.log(val)\r\nsetBookingType(val);\r\n\r\n}\r\n\r\nconst changeDate=(e)=>{\r\n // console.log(e.target.value)\r\n  setBookingDate(e.target.value);\r\n  setBookingTime(\r\n    trainerAvail\r\n      ?.filter(item => item.availability_date === e.target.value)[0].availability_start_time // Assuming item.date is in \"YYYY-MM-DD\" format\r\n      \r\n      // .map((item, i) => (\r\n      // <option key={i} value={item.availability_start_time}>\r\n      // {item.availability_start_time} - {item.availability_end_time}\r\n      // </option>\r\n      // ))\r\n\r\n  )\r\n};\r\nconst changeTime=(e)=>{\r\n // console.log(e.target.value)\r\n  setBookingTime(e.target.value)\r\n}\r\n\r\nuseEffect(()=>{\r\n  const fetchTrainerAvailabilty = async ()=>{\r\n    try{\r\n      const trainerAvailResponse= await apiGet(`${API_ENDPOINTS.TRAINER_AVAILABILTY}/${userData.id}`);\r\n     // console.log(trainerAvailResponse.data.processedAvailabilities)\r\n      if(trainerAvailResponse.success){\r\n         //  console.log(instructorPDPResponse.data)\r\n         setTrainerAvail(   trainerAvailResponse.data.processedAvailabilities.filter((item)=>{ //this is done for filter out the repeated date of availablty based on lesson hour\r\n          return item.lesson_hours === bookingType\r\n          }))\r\n         \r\n      }\r\n    }\r\n    catch(error){\r\n      //console.log('Error fetching in instructor available', error)\r\n    }\r\n}\r\n\r\nfetchTrainerAvailabilty()\r\n},[bookingType])\r\n\r\nuseEffect(()=>{\r\n  setBookingDate(trainerAvail[0]?.availability_date);\r\n  setBookingTime(trainerAvail[0]?.availability_start_time);\r\n},[trainerAvail])\r\n\r\n\r\nconst scheduleBooking= async () => {\r\n  // Prepare the form data for submission\r\n  try {\r\n    setIsLoading(true)\r\n    //  const response = await apiPost(`${API_ENDPOINTS.INSTRUCTOR_REGISTER}`, formData);\r\n    const response = await axios.post(\r\n      `${process.env.REACT_APP_API_BASE_URL}/${API_ENDPOINTS.NEW_BOOKING_PROPOSAL}`,\r\n      {learner_id:learnerId,\r\n        booking_type:bookingType,\r\n         lesson_date:bookingDate ,\r\n         lesson_time:bookingTime,\r\n      },\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    );\r\n    // Check if the response is valid\r\n    if (!response || !response.data) {\r\n      throw new Error(\"Invalid response format\");\r\n    }\r\n    // Show SweetAlert on success\r\n    Swal.fire({\r\n      icon: \"success\",\r\n      title: \"New Booking Created Successfully!\",\r\n      //text: \"Your request has been submitted.\",\r\n    });\r\n  } catch (error) {\r\n    // Handle errors\r\n   \r\n    Swal.fire({\r\n      icon: \"error\",\r\n      title: \"Submission Failed\",\r\n      text:\r\n        error.message || \"Something went wrong. Please try again later.\",\r\n    });\r\n  } finally {\r\n    setIsLoading(false)\r\n  }\r\n}\r\n  return (\r\n    <div>\r\n      {isLoading && <Loader />}\r\n      <div className=\"mainContent\">\r\n        <Breadcrumb />\r\n        <div className=\"mainContent__assets\">\r\n          <Container>\r\n            <Row>\r\n              <Col lg={12}>\r\n                {/* Account setting */}\r\n                <div className=\"personalDetailsForm\">\r\n                  <div className=\"d-flex justify-content-between align-items-center\">\r\n                    <h2>New Booking Proposal</h2>\r\n\r\n                    <div className=\"d-flex gap-2\">\r\n                      <button className=\"btn btn-grey-outline rounded-2 btn-sm\"  onClick={() => navigate(-1)}>\r\n                      X CANCEL PROPOSAL\r\n                      </button>\r\n                      <Link to=\"/instructor/NewBooking\" className=\"btn btn-grey rounded-2 btn-sm\" onClick={()=>{toast.error(`Can't Perform this action`)}}>\r\n                        + PROPOSE NEW BOOKING\r\n                      </Link>\r\n                    </div>\r\n                  </div>\r\n                 \r\n\r\n                  <div className=\"personalDetailsForm__wrp\">\r\n                    <div className=\"personalDetailsForm__top\">\r\n                      <h4>Booking </h4>\r\n                    </div>\r\n\r\n                        <div className=\"ProfileForm RegistrationForm\">\r\n                          <fieldset>\r\n                            <div className=\"form-group\">\r\n                              <label htmlFor=\"learnerName\">*Learner</label>\r\n                              <select className=\"form-control\" onChange={changeLearnerId}>\r\n                                {learnerList?.map((item, i)=>(\r\n                                  <option value={item.id} key={item.id} address={item.address} selected={item.id === learnerId}>{item.first_name} {item.last_name}</option>\r\n                                ))}\r\n                              </select>\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                              {/* driving lesson=> true, false, driving test package=> true , false */}\r\n                              <label>*Booking Type</label>\r\n                              <div className=\"booking-type-options\">\r\n                                <button type=\"button\" className= {bookingType === 1 ? 'btn btn-teal' : 'btn'} onClick={()=>{changeBookType(1)}}>\r\n                                  1-Hour Driving Lesson\r\n                                </button>\r\n                                <button type=\"button\" className= {bookingType === 2 ? 'btn btn-teal' : 'btn'} onClick={()=>{changeBookType(2)}}>\r\n                                  2-Hour Driving Lesson\r\n                                </button>\r\n                                {/* <button type=\"button\" className={1 ? 'btn btn-teal' : 'btn'} >\r\n                                  Driving Test Package\r\n                                </button> */}\r\n                              </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                              <label>*Lesson Start Time</label>\r\n                              <div className=\"row\">\r\n                                <div className=\"col-md-6\">\r\n                                  <select name=\"lesson_date\" className=\"form-control\" onChange={changeDate}>\r\n                                   \r\n                                    {trainerAvail?.map((item, i)=>(\r\n                                      <option key={i} value={item.availability_date}>{item.formatted_date}</option>\r\n                                    ))}\r\n                                     {/* bookingDate */}\r\n                                  </select>\r\n                                </div>\r\n                                <div className=\"col-md-6\">\r\n                                  <select  name=\"lesson_time\" className=\"form-control\" onChange={changeTime}>\r\n                                    {/* {trainerAvail?.map((item, i)=>(\r\n                                      <option key={i} value={item.availability_start_time}>{item.availability_start_time} - {item.availability_end_time}</option>\r\n                                    ))}  */}\r\n                                  {trainerAvail\r\n                                  ?.filter(item => item.availability_date === bookingDate) // Assuming item.date is in \"YYYY-MM-DD\" format\r\n                                  .map((item, i) => (\r\n                                  <option key={i} value={item.availability_start_time}>\r\n                                  {item.availability_start_time} - {item.availability_end_time}\r\n                                  </option>\r\n                                  ))}\r\n                                  </select>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                              <label>*Lesson Pick Up Location</label>\r\n                              <div className=\"location-display position-relative\">\r\n                                <input\r\n                                  type=\"text\"\r\n                                  className=\"form-control\"\r\n                                    value={learnerAddress}\r\n                                  disabled\r\n                                />\r\n                                \r\n                              </div>\r\n\r\n                              {/* <div className=\"row mt-3\">\r\n                                <div className=\"col-md-4\">\r\n                                  <Field\r\n                                    type=\"text\"\r\n                                    name=\"streetNumber\"\r\n                                    className=\"form-control\"\r\n                                    placeholder=\"Street No.\"\r\n                                  />\r\n                                </div>\r\n                                <div className=\"col-md-4\">\r\n                                  <Field\r\n                                    type=\"text\"\r\n                                    name=\"streetName\"\r\n                                    className=\"form-control\"\r\n                                    placeholder=\"Street Name\"\r\n                                  />\r\n                                </div>\r\n                                <div className=\"col-md-4\">\r\n                                  <Field\r\n                                    type=\"text\"\r\n                                    name=\"street\"\r\n                                    className=\"form-control\"\r\n                                    placeholder=\"Street\"\r\n                                  />\r\n                                </div>\r\n                              </div> */}\r\n\r\n                              {/* <div className=\"form-group mt-3\">\r\n                                <Field\r\n                                  type=\"text\"\r\n                                  name=\"alternateLocation\"\r\n                                  className=\"form-control\"\r\n                                  placeholder=\"Alexander Heights WA 6064\"\r\n                                />\r\n                              </div> */}\r\n                            </div>\r\n\r\n                            <p className=\"form-note\">\r\n                              Booking proposals will \"hold\" the selected time\r\n                              slot(s) until confirmed by the learner. Proposals\r\n                              remain valid for 24 hours OR proposed booking\r\n                              start time (whichever arrives first).\r\n                            </p>\r\n                            <div className=\"d-flex justify-content-end personalDetailsForm__btnWrapper gap-4 flex-wrap \">\r\n                            {bookingType && (  <button className=\"btn btn-teal updateChanges\" \r\n                            // onClick={scheduleBooking}\r\n                            onClick={()=>{toast.error(`Can't Perform this action`)}} \r\n                            >+ ADD ANOTHER BOOKING</button> )}\r\n                            </div>\r\n                          </fieldset>\r\n                        </div>\r\n                     \r\n                  </div>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </div>\r\n      </div>\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n}\r\n"],"names":["Breadcrumb","pathSegments","useLocation","pathname","split","filter","Boolean","length","pop","breadcrumbs","segment","map","index","secondLastSegment","lastSegment","_jsx","className","children","_jsxs","Link","to","src","homeIco","alt","replace","NewBooking","location","navigate","useNavigate","userData","token","useAuth","isLoading","setIsLoading","useState","learnerList","setLearnerList","learnerId","setLearnerId","bookingType","setBookingType","trainerAvail","setTrainerAvail","learnerAddress","setLearnerAddress","bookingDate","setBookingDate","bookingTime","setBookingTime","useEffect","async","authInstance","axiosWithAuth","responseNew","post","API_ENDPOINTS","YOUR_LEARNER_STUDENTS","response","data","_location$state","_location$state2","success","state","id","address","console","error","fetchLearnerStudent","changeBookType","val","trainerAvailResponse","apiGet","TRAINER_AVAILABILTY","processedAvailabilities","item","lesson_hours","fetchTrainerAvailabilty","_trainerAvail$","_trainerAvail$2","availability_date","availability_start_time","Loader","Container","Row","Col","lg","onClick","toast","htmlFor","onChange","e","target","selectedOptions","getAttribute","value","i","selected","first_name","last_name","type","name","formatted_date","availability_end_time","disabled","ToastContainer"],"sourceRoot":""}