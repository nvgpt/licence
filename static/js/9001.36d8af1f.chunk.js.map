{"version":3,"file":"static/js/9001.36d8af1f.chunk.js","mappings":"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","sources":["Components/LearnerLogin.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport loginSide from \"../assets/images/loginSide.png\"; // Image for side section\r\nimport logo from \"../assets/images/logo.svg\"; // Logo image\r\nimport { Link, useNavigate } from \"react-router-dom\"; // Import useNavigate for redirecting\r\nimport { apiPost } from \"../utilities/axiosInstance\"; // Assuming apiPost is set up for POST requests\r\nimport API_ENDPOINTS from \"../utilities/apiEndPoints\"; // Your API endpoints\r\nimport Swal from \"sweetalert2\"; // Import SweetAlert2 for notifications\r\nimport { useAuth } from \"../context/AuthContext\";\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\"; // Import Formik\r\nimport * as Yup from \"yup\"; // Import Yup for validation\r\n\r\nfunction LearnerLogin() {\r\n  const navigate = useNavigate();\r\n  const { setRole, setUserData, setToken, setInstructor } = useAuth();\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [error, setError] = useState(null);\r\n  // Check if user is already logged in when the component mounts\r\n  useEffect(() => {\r\n    const authToken = sessionStorage.getItem(\"authToken\");\r\n    if (authToken) {\r\n      // If user is logged in, redirect to the profile page\r\n      navigate(\"/learner/learner-profile\");\r\n    }\r\n  }, [navigate]);\r\n\r\n  // Validation schema for Formik using Yup\r\n  const validationSchema = Yup.object({\r\n    email: Yup.string()\r\n      .email(\"Please enter a valid email address.\")\r\n      .required(\"Email is required.\"),\r\n    password: Yup.string().required(\"Password is required.\"),\r\n    agreeToTerms: Yup.bool()\r\n      .oneOf([true], \"You must agree to the terms and conditions.\")\r\n      .required(\"Agreement is required.\"),\r\n  });\r\n\r\n  // Handle form submission and API call\r\n  const handleSubmit = async (values) => {\r\n    setLoading(true);\r\n    const { email, password, agreeToTerms } = values;\r\n\r\n    try {\r\n      const response = await apiPost(API_ENDPOINTS.LEARNER_LOGIN, {\r\n        email,\r\n        password,\r\n      });\r\n\r\n      if (response.success) {\r\n        // Store token and user details\r\n        sessionStorage.setItem(\"authToken\", response.data.token);\r\n        sessionStorage.setItem(\r\n          \"userDetails\",\r\n          JSON.stringify(response.data.userDetails)\r\n        );\r\n        sessionStorage.setItem(\r\n          \"instructor\",\r\n          JSON.stringify(response.data.instructor)\r\n        );\r\n        sessionStorage.setItem(\"role\", \"learner\");\r\n        sessionStorage.setItem(\"profileImg\",response.data.userDetails.profile_picture)\r\n        sessionStorage.setItem(\"profileName\",response.data.userDetails.first_name)\r\n        setRole(\"learner\");\r\n        setToken(response.data.token);\r\n        setUserData(response.data.userDetails);\r\n        setInstructor(response.data.instructor);\r\n\r\n        // Show SweetAlert for success\r\n        Swal.fire({\r\n          icon: \"success\",\r\n          title: \"Welcome!\",\r\n          text: `Welcome, ${response.data.userDetails.first_name}!`,\r\n          confirmButtonText: \"Okay\",\r\n        }).then((result) => {\r\n          navigate(\"/learner/dashboard\");\r\n        });\r\n      } else {\r\n        throw new Error(response);\r\n      }\r\n    } catch (error) {\r\n      // Log the full error to understand its structure\r\n      const errorMessage = error?.message;\r\n      // Set the error message for display in the UI\r\n      setError(errorMessage);\r\n      // Show a SweetAlert popup with the correct error message\r\n      Swal.fire({\r\n        icon: \"error\",\r\n        title: \"Login Failed\",\r\n        text: errorMessage,\r\n        confirmButtonText: \"Try Again\",\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col lg={12}>\r\n          <div className=\"LoginFormWrp d-flex\">\r\n            <div className=\"LoginFormWrp__left\">\r\n              <img src={loginSide} alt=\"Login Side\" />\r\n              <div className=\"LoginFormWrp__logo\">\r\n                <img src={logo} alt=\"logo\" />\r\n              </div>\r\n            </div>\r\n            <div className=\"LoginFormWrp__right\">\r\n              <h2>Learner Login</h2>\r\n\r\n              {/* Formik Form */}\r\n              <Formik\r\n                initialValues={{\r\n                  email: \"\",\r\n                  password: \"\",\r\n                  agreeToTerms: false,\r\n                }}\r\n                validationSchema={validationSchema}\r\n                onSubmit={handleSubmit}\r\n              >\r\n                {({ isSubmitting }) => (\r\n                  <Form className=\"LoginFormWrp__form d-flex flex-column\">\r\n                    <div className=\"form-group\">\r\n                      <label htmlFor=\"email\">* Your Email</label>\r\n                      <Field\r\n                        type=\"email\"\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Enter your email...\"\r\n                      />\r\n                      <ErrorMessage\r\n                        name=\"email\"\r\n                        component=\"div\"\r\n                        className=\"error-message\"\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                      <label htmlFor=\"password\">* Your Password</label>\r\n                      <Field\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        name=\"password\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Enter your password...\"\r\n                      />\r\n                      <ErrorMessage\r\n                        name=\"password\"\r\n                        component=\"div\"\r\n                        className=\"error-message\"\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                      <label className=\"d-flex align-items-start gap-2\">\r\n                        <Field\r\n                          type=\"checkbox\"\r\n                          id=\"agreeToTerms\"\r\n                          name=\"agreeToTerms\"\r\n                        />\r\n                        <div className=\"CheckboxHighlight\"></div>\r\n                        <p>\r\n                          I agree to the{\" \"}\r\n                          <Link to=\"/instructor-terms\">\r\n                            terms and conditions\r\n                          </Link>\r\n                        </p>\r\n                      </label>\r\n                      <ErrorMessage\r\n                        name=\"agreeToTerms\"\r\n                        component=\"div\"\r\n                        className=\"error-message\"\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"d-flex flex-column gap-3 LoginFormWrp__btnWrp\">\r\n                      <button\r\n                        type=\"submit\"\r\n                        className=\"btn btn-white has-hover-blue\"\r\n                        disabled={isSubmitting || loading}\r\n                      >\r\n                        {loading ? \"Logging in...\" : \"Login >\"}\r\n                      </button>\r\n                    </div>\r\n                  </Form>\r\n                )}\r\n              </Formik>\r\n              <div className=\"\">Forgot Password?<Link to=\"/learner-forget-password\"> click here..</Link></div>\r\n            </div>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default LearnerLogin;\r\n"],"names":["navigate","useNavigate","setRole","setUserData","setToken","setInstructor","useAuth","loading","setLoading","React","error","setError","useState","useEffect","sessionStorage","getItem","validationSchema","Yup","email","required","password","agreeToTerms","oneOf","_jsx","Container","children","Row","Col","lg","_jsxs","className","src","loginSide","alt","logo","Formik","initialValues","onSubmit","async","values","response","apiPost","API_ENDPOINTS","LEARNER_LOGIN","success","Error","setItem","data","token","JSON","stringify","userDetails","instructor","profile_picture","first_name","Swal","icon","title","text","confirmButtonText","then","result","errorMessage","message","_ref","isSubmitting","Form","htmlFor","Field","type","id","name","placeholder","ErrorMessage","component","Link","to","disabled"],"sourceRoot":""}