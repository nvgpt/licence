{"version":3,"file":"static/js/8108.311a4fdb.chunk.js","mappings":"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","sources":["Trainer/Components/Breadcrumb.jsx","Trainer/Components/reports/Reports.jsx","../node_modules/react-bootstrap/esm/Table.js"],"sourcesContent":["import React from \"react\";\r\nimport { useLocation, Link } from \"react-router-dom\";\r\nimport homeIco from \"../../assets/images/home.svg\";\r\n\r\nexport default function Breadcrumb() {\r\n  const location = useLocation();\r\n  const pathSegments = location.pathname.split(\"/\").filter(Boolean); // Split and clean the path\r\n\r\n  // Determine if it's a 'trainer' path, which should be ignored in the breadcrumb\r\n  const isTrainerPage = pathSegments[0] === \"instructor\";\r\n\r\n  // If it's a 'learner-list-details' page, redirect to 'learner-list'\r\n  if (pathSegments[1] === \"learner-list-details\" && pathSegments.length > 2) {\r\n    pathSegments[1] = \"learner-list\"; // Modify to 'learner-list'\r\n    pathSegments.pop(); // Remove the last segment (id like 1)\r\n  }\r\n\r\n  // If 'trainer' is in the path, skip it and take 'dashboard' instead\r\n  const breadcrumbs = pathSegments\r\n    .filter(segment => segment !== \"instructor\") // Remove 'trainer' from breadcrumbs\r\n    .map((segment, index) => {\r\n      if (segment === \"dashboard\" && index === 0) {\r\n        // Avoid showing 'Dashboard' in breadcrumb if it's the root page\r\n        return null;\r\n      }\r\n      return segment;\r\n    })\r\n    .filter(Boolean); // Filter out any null values (to avoid empty breadcrumb)\r\n\r\n  const secondLastSegment = breadcrumbs[breadcrumbs.length - 2];\r\n  const lastSegment = breadcrumbs[breadcrumbs.length - 1];\r\n\r\n  return (\r\n    <div className=\"breadcrumb\">\r\n      <p>\r\n        {breadcrumbs.length > 0 && (\r\n          <Link to=\"/instructor/dashboard\">\r\n            <img src={homeIco} alt=\"Home\" />\r\n          </Link>\r\n        )}\r\n        {secondLastSegment && (\r\n          <span>\r\n            &gt; &nbsp;\r\n            <Link to={`/instructor/${secondLastSegment}`}>\r\n              {secondLastSegment.replace(/-/g, \" \")} {/* Optional: Replace hyphens with spaces */}\r\n            </Link>\r\n          </span>\r\n        )}\r\n        {lastSegment && (\r\n          <span>\r\n            &gt; &nbsp;\r\n            {lastSegment.replace(/-/g, \" \")} {/* Last segment, no link */}\r\n          </span>\r\n        )}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React,{useState} from \"react\";\r\nimport Breadcrumb from \"../Breadcrumb\";\r\nimport { Container, Row, Col, Table } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst bookings = [\r\n  {\r\n    id: \"#20465830392\",\r\n    learner: \"Anthony S.\",\r\n    date: \"Fri, 08 Dec 2024\",\r\n    time: \"9.30am-10.30am\",\r\n    location: \"123 Main Street, Perth 6000 WA\",\r\n    status: \"COMPLETED PAYMENT\",\r\n  },\r\n];\r\n\r\nconst getStatusClass = (status) => {\r\n  if (status.includes(\"CANCELLED\")) return \"text-red\";\r\n  if (status.includes(\"COMPLETED\")) return \"text-green\";\r\n  return \"text-secondary\";\r\n};\r\nexport default function Reports() {\r\n  const [openTable, setOpenTable]=useState({\r\n   pendingPayouts:false,\r\n   financialReporting:true,\r\n   totalBooking:false,\r\n   totalLearners:false,\r\n   creditHeld:false,\r\n  totalTestPackage:false,\r\n  upcomingBookHrs:false,\r\n  })\r\n\r\n  const toggleTable = (value) => {\r\n    setOpenTable(prevState => {\r\n      const resetState = {\r\n        pendingPayouts: false,\r\n        financialReporting: false,\r\n        totalBooking: false,\r\n        totalLearners: false,\r\n        creditHeld: false,\r\n        totalTestPackage: false,\r\n        upcomingBookHrs: false\r\n      };\r\n      return {\r\n        ...resetState,\r\n        [value]: !prevState[value]\r\n      };\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"mainContent\">\r\n        <Breadcrumb />\r\n        <div className=\"mainContent__assets\">\r\n          <Container>\r\n            <Row>\r\n              <Col lg={12}>\r\n                {/* Account setting */}\r\n                <div className=\"personalDetailsForm\">\r\n                  {/* payoutAccordians */}\r\n                  <h2 className=\"mb-0\">Pending Payouts</h2>\r\n                  <div className=\"payoutAccordians\">\r\n                    <div className=\"payoutAccordians__card\">\r\n                      <div className=\"payoutAccordians__top\">\r\n                        <h4>Unauthorised Payments</h4>\r\n                      </div>\r\n                      <div className=\"payoutAccordians__description\">\r\n                        <div className=\"payoutAccordians__nextpayout\">\r\n                          {/* <p>Next Payout - 18 Sep 2024</p> */}\r\n                          <p>No payment records available.</p>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* payoutAccordians */}\r\n                  <h2 className=\"mb-0 mt-4\">Financial Reporting</h2>\r\n                  <div className=\"payoutAccordians\">\r\n\r\n                    <div className=\"payoutAccordians__card\">\r\n                      <div className=\"payoutAccordians__top\" onClick={()=>toggleTable('financialReporting')}>\r\n                        <h4>Financial Year 2024/25</h4>\r\n                      </div>\r\n                     {openTable.financialReporting &&  <div className=\"payoutAccordians__description\">\r\n                        <Table>\r\n                          <thead>\r\n                            <tr>\r\n                              <th colSpan={2}>Transaction Summary (YTD)</th>\r\n                              <th colSpan={3}>Payout</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            {/* {bookings.map((booking, index) => (\r\n                              <tr key={index}>\r\n                                <td>{booking.id}</td>\r\n                                <td>{booking.learner}</td>\r\n                                <td>{booking.date}</td>\r\n                                <td><Link to=\"/instructor/reports/invoice\">Transaction Summary</Link></td>\r\n                                \r\n                              </tr>\r\n                            ))} */}\r\n                            <tr>\r\n                              <td colSpan={3}>No transaction  records available.</td>\r\n                            </tr>\r\n                          </tbody>\r\n                        </Table>\r\n                        <Table>\r\n                          <thead>\r\n                            <tr>\r\n                              <th colSpan={2}>Fortnightly Reports</th>\r\n                              <th colSpan={3}>Payout</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            {/* {bookings.map((booking, index) => (\r\n                              <tr key={index}>\r\n                                <td>{booking.id}</td>\r\n                                <td>{booking.learner}</td>\r\n                                <td>{booking.date}</td>\r\n                                <td><Link to=\"/instructor/reports/invoice\">Tax Invoice</Link>   <Link to=\"/instructor/reports/invoice\">Transaction Summary</Link></td>\r\n                                \r\n                              </tr>\r\n                            ))} */}\r\n                            <tr>\r\n                              <td colSpan={3}>No fortnightly  records available.</td>\r\n                            </tr>\r\n                          </tbody>\r\n                        </Table>\r\n                      </div>\r\n                    }\r\n                    </div>\r\n\r\n                    \r\n                  </div>\r\n\r\n                  {/* payoutAccordians */}\r\n                  <h2 className=\"mb-0 mt-4\">Other Metrics</h2>\r\n                  <div className=\"payoutAccordians\">\r\n\r\n                  <div className=\"payoutAccordians__card\">\r\n                      <div className=\"payoutAccordians__top\" onClick={()=>toggleTable('totalBooking')}>\r\n                        <h4>Total booking hours</h4>\r\n                      </div>\r\n                      {openTable.totalBooking && <div className=\"payoutAccordians__description\">\r\n                        <Table className=\"d-none\">\r\n                          <thead>\r\n                            <tr>\r\n                              <th colSpan={2}>Transaction Summary (YTD)</th>\r\n                              <th colSpan={3}>Payout</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            {bookings.map((booking, index) => (\r\n                              <tr key={index}>\r\n                                <td>{booking.id}</td>\r\n                                <td>{booking.learner}</td>\r\n                                <td>{booking.date}</td>\r\n                                <td>{booking.time}</td>\r\n                                <td>{booking.location}</td>\r\n                              </tr>\r\n                            ))}\r\n                          </tbody>\r\n                        </Table>\r\n                        <Table className=\"d-none\">\r\n                          <thead>\r\n                            <tr>\r\n                              <th colSpan={2}>Transaction Summary (YTD)</th>\r\n                              <th colSpan={3}>Payout</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            {bookings.map((booking, index) => (\r\n                              <tr key={index}>\r\n                                <td>{booking.id}</td>\r\n                                <td>{booking.learner}</td>\r\n                                <td>{booking.date}</td>\r\n                                <td>{booking.time}</td>\r\n                                <td>{booking.location}</td>\r\n                              </tr>\r\n                            ))}\r\n                          </tbody>\r\n                        </Table>\r\n                        <Table>\r\n                          <tbody>\r\n                          <tr>\r\n                            <td><p>No booking records available.</p></td>\r\n                          </tr>\r\n                          </tbody>\r\n                        </Table>\r\n                      </div>\r\n}\r\n                    </div>\r\n\r\n                    <div className=\"payoutAccordians__card\">\r\n                      <div className=\"payoutAccordians__top\" onClick={()=>toggleTable('totalLearners')}>\r\n                        <h4>Total learners</h4>\r\n                      </div>\r\n                      {openTable.totalLearners && <div className=\"payoutAccordians__description\">\r\n                        <Table className=\"d-none\">\r\n                          <thead>\r\n                            <tr>\r\n                              <th colSpan={2}>Transaction Summary (YTD)</th>\r\n                              <th colSpan={3}>Payout</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            {bookings.map((booking, index) => (\r\n                              <tr key={index}>\r\n                                <td>{booking.id}</td>\r\n                                <td>{booking.learner}</td>\r\n                                <td>{booking.date}</td>\r\n                                <td>{booking.time}</td>\r\n                                <td>{booking.location}</td>\r\n                              </tr>\r\n                            ))}\r\n                          </tbody>\r\n                        </Table>\r\n                        <Table className=\"d-none\">\r\n                          <thead>\r\n                            <tr>\r\n                              <th colSpan={2}>Transaction Summary (YTD)</th>\r\n                              <th colSpan={3}>Payout</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            {bookings.map((booking, index) => (\r\n                              <tr key={index}>\r\n                                <td>{booking.id}</td>\r\n                                <td>{booking.learner}</td>\r\n                                <td>{booking.date}</td>\r\n                                <td>{booking.time}</td>\r\n                                <td>{booking.location}</td>\r\n                              </tr>\r\n                            ))}\r\n                          </tbody>\r\n                        </Table>\r\n                        <Table>\r\n                          <tbody>\r\n                          <tr>\r\n                            <td><p>No learner records available.</p></td>\r\n                          </tr>\r\n                          </tbody>\r\n                        </Table>\r\n                      </div>\r\n}\r\n                    </div>\r\n\r\n                    <div className=\"payoutAccordians__card\">\r\n                      <div className=\"payoutAccordians__top\" onClick={()=>toggleTable('creditHeld')}>\r\n                        <h4>Credits held by Learners</h4>\r\n                      </div>\r\n                      {openTable.creditHeld && <div className=\"payoutAccordians__description\">\r\n                        <Table className=\"d-none\">\r\n                          <thead>\r\n                            <tr>\r\n                              <th colSpan={2}>Transaction Summary (YTD)</th>\r\n                              <th colSpan={3}>Payout</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            {bookings.map((booking, index) => (\r\n                              <tr key={index}>\r\n                                <td>{booking.id}</td>\r\n                                <td>{booking.learner}</td>\r\n                                <td>{booking.date}</td>\r\n                                <td>{booking.time}</td>\r\n                                <td>{booking.location}</td>\r\n                              </tr>\r\n                            ))}\r\n                          </tbody>\r\n                        </Table>\r\n                        <Table className=\"d-none\">\r\n                          <thead>\r\n                            <tr>\r\n                              <th colSpan={2}>Transaction Summary (YTD)</th>\r\n                              <th colSpan={3}>Payout</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            {bookings.map((booking, index) => (\r\n                              <tr key={index}>\r\n                                <td>{booking.id}</td>\r\n                                <td>{booking.learner}</td>\r\n                                <td>{booking.date}</td>\r\n                                <td>{booking.time}</td>\r\n                                <td>{booking.location}</td>\r\n                              </tr>\r\n                            ))}\r\n                          </tbody>\r\n                        </Table>\r\n                        <Table>\r\n                          <tbody>\r\n                          <tr>\r\n                            <td><p>No records available.</p></td>\r\n                          </tr>\r\n                          </tbody>\r\n                        </Table>\r\n                      </div>\r\n}\r\n                    </div>\r\n\r\n                    <div className=\"payoutAccordians__card\">\r\n                      <div className=\"payoutAccordians__top\" onClick={()=>toggleTable('totalTestPackage')}>\r\n                        <h4>Total test packages</h4>\r\n                      </div>\r\n                      {openTable.totalTestPackage && <div className=\"payoutAccordians__description\">\r\n                        <Table className=\"d-none\">\r\n                          <thead>\r\n                            <tr>\r\n                              <th colSpan={2}>Transaction Summary (YTD)</th>\r\n                              <th colSpan={3}>Payout</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            {bookings.map((booking, index) => (\r\n                              <tr key={index}>\r\n                                <td>{booking.id}</td>\r\n                                <td>{booking.learner}</td>\r\n                                <td>{booking.date}</td>\r\n                                <td>{booking.time}</td>\r\n                                <td>{booking.location}</td>\r\n                              </tr>\r\n                            ))}\r\n                          </tbody>\r\n                        </Table>\r\n                        <Table>\r\n                          <tbody>\r\n                          <tr>\r\n                            <td><p>No records available.</p></td>\r\n                          </tr>\r\n                          </tbody>\r\n                        </Table>\r\n                      </div>\r\n}\r\n                    </div>\r\n                    \r\n                    <div className=\"payoutAccordians__card\">\r\n                      <div className=\"payoutAccordians__top\" onClick={()=>toggleTable('upcomingBookHrs')}>\r\n                        <h4>Upcoming hours booked</h4>\r\n                      </div>\r\n                      {openTable.upcomingBookHrs && <div className=\"payoutAccordians__description\">\r\n                        <Table className=\"d-none\">\r\n                          <thead>\r\n                            <tr>\r\n                              <th colSpan={2}>Transaction Summary (YTD)</th>\r\n                              <th colSpan={3}>Payout</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>\r\n                            {bookings.map((booking, index) => (\r\n                              <tr key={index}>\r\n                                <td>{booking.id}</td>\r\n                                <td>{booking.learner}</td>\r\n                                <td>{booking.date}</td>\r\n                                <td>{booking.time}</td>\r\n                                <td>{booking.location}</td>\r\n                              </tr>\r\n                            ))}\r\n                          </tbody>\r\n                        </Table>\r\n                        <Table>\r\n                          <tbody>\r\n                          <tr>\r\n                            <td><p>No records available.</p></td>\r\n                          </tr>\r\n                          </tbody>\r\n                        </Table>\r\n                      </div>\r\n}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Table = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  striped,\n  bordered,\n  borderless,\n  hover,\n  size,\n  variant,\n  responsive,\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  const classes = classNames(className, decoratedBsPrefix, variant && `${decoratedBsPrefix}-${variant}`, size && `${decoratedBsPrefix}-${size}`, striped && `${decoratedBsPrefix}-${typeof striped === 'string' ? `striped-${striped}` : 'striped'}`, bordered && `${decoratedBsPrefix}-bordered`, borderless && `${decoratedBsPrefix}-borderless`, hover && `${decoratedBsPrefix}-hover`);\n  const table = /*#__PURE__*/_jsx(\"table\", {\n    ...props,\n    className: classes,\n    ref: ref\n  });\n  if (responsive) {\n    let responsiveClass = `${decoratedBsPrefix}-responsive`;\n    if (typeof responsive === 'string') {\n      responsiveClass = `${responsiveClass}-${responsive}`;\n    }\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: responsiveClass,\n      children: table\n    });\n  }\n  return table;\n});\nexport default Table;"],"names":["Breadcrumb","pathSegments","useLocation","pathname","split","filter","Boolean","length","pop","breadcrumbs","segment","map","index","secondLastSegment","lastSegment","_jsx","className","children","_jsxs","Link","to","src","homeIco","alt","replace","bookings","id","learner","date","time","location","status","Reports","openTable","setOpenTable","useState","pendingPayouts","financialReporting","totalBooking","totalLearners","creditHeld","totalTestPackage","upcomingBookHrs","toggleTable","value","prevState","Container","Row","Col","lg","onClick","Table","colSpan","booking","React","_ref","ref","bsPrefix","striped","bordered","borderless","hover","size","variant","responsive","props","decoratedBsPrefix","useBootstrapPrefix","classes","classNames","table","responsiveClass"],"sourceRoot":""}