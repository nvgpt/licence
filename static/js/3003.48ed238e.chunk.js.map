{"version":3,"file":"static/js/3003.48ed238e.chunk.js","mappings":"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","sources":["Learner-dashboard/Preferences.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport { Formik, Form, Field, useFormikContext } from \"formik\";\r\nimport placeholderImg from \"../assets/images/image-placeholder.png\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport * as Yup from \"yup\";\r\nimport Swal from \"sweetalert2\";\r\n//import { apiGet, apiPost } from \"../utilities/axiosInstance\";\r\nimport API_ENDPOINTS from \"../utilities/apiEndPoints\";\r\nimport { useAuth } from \"../context/AuthContext\";\r\nimport Breadcrumb from \"./Components/Breadcrumb\";\r\nimport axios from \"axios\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport AutocompleteAddress from '../Components/AutocompleteAddress';\r\n\r\n\r\nexport default function Preferences() {\r\n  const { userData, token,setNewProfileImg } = useAuth();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [InstructorLanguages, setInstructorLanguages] = useState([]);\r\n  const [Transmission, setTransmission] = useState(\"\");\r\n  const [selectedImage, setSelectedImage] = useState(placeholderImg);\r\n  const [selectedImageFile, setSelectedImageFile] = useState(null)\r\n  const [addressSuburb, setAddressSuburb]= useState({})\r\n  const [optionalNote, setOptionalNote]= useState('');\r\n  const [sms_notification, setSmsnotification]= useState();\r\n  const [email_notification, setEmailnotification] = useState();\r\n  const [pickupAddress, setPickupAddress] = useState();\r\n  const [suburb, setSuburb]= useState({suburbID:'', suburbName:'' });\r\n  const [state, setState] = useState({ stateID:'', stateName:'' });\r\n  const [postCode, setPostCode] = useState();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const fetchLearnerDetails = async () => {\r\n      setIsLoading(true);\r\n      try {\r\n        const response = await axios.get(\r\n          `${process.env.REACT_APP_API_BASE_URL}${API_ENDPOINTS.LEARBER_PREFERENCES}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n          }\r\n        );\r\n        //console.log(response.data)\r\n        if (response.data.success) {\r\n          const data = response.data.data;\r\n        //  console.log(data)\r\n          setInstructorLanguages(data.language_spoken || []);\r\n          setTransmission(data.preferred_transmission || \"\");\r\n          setSelectedImage(  data.profile_picture || placeholderImg     );\r\n          setPickupAddress(data.preferred_pickup_address || \"\");\r\n          setOptionalNote(data.optional_note_instructor || \"\");\r\n          setSmsnotification(data.sms_comm_offer);\r\n          setEmailnotification(data.email_comm_offer);\r\n          setSuburb({ suburbID:data.suburb_id, suburbName:data.suburb  });\r\n          setState({stateID:data.state,stateName:data.state_name, stateSlug:data.state_slug});\r\n          setPostCode(data.postcode)\r\n\r\n\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching instructor details:\", error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchLearnerDetails();\r\n    }, [userData.id, token]);\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    preferred_transmission: Yup.string().required(\"Transmission type is required\"),\r\n  });\r\n\r\n  const handleImageChange = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      setSelectedImageFile(file)\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        setSelectedImage(reader.result);\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n\r\n  const BillingAddressUpdater = ({ addressSuburb }) => {\r\n    const { setFieldValue } = useFormikContext(); // Get Formik instance\r\n  \r\n    useEffect(() => {\r\n      if (addressSuburb) {\r\n        setFieldValue(\"billing_address\", addressSuburb);\r\n      }\r\n    }, [addressSuburb, setFieldValue]); // Runs when addressSuburb changes\r\n  \r\n    return null; // This component doesn't render anything\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <div className=\"mainContent\">\r\n      <Breadcrumb />\r\n      <div className=\"mainContent__assets\">\r\n        <Container>\r\n          <Row>\r\n            <Col lg={12}>\r\n              <div className=\"personalDetailsForm\">\r\n                <Link onClick={() => navigate(-1)}>&lt; Go back </Link>\r\n                <h2>My Preferences</h2>\r\n\r\n                <div className=\"personalDetailsForm__wrp\">\r\n                  <div className=\"personalDetailsForm__top\"> <h4>My Profile</h4> </div>\r\n\r\n                <Formik\r\n                  enableReinitialize\r\n                  initialValues={{\r\n                    languages_spoken: InstructorLanguages.join(\", \") || \"\",\r\n                    preferred_transmission: Transmission || \"\",\r\n                    email_comm_offer:email_notification || '0',\r\n                    sms_comm_offer:sms_notification || '0',\r\n                    profile_picture:selectedImageFile,\r\n                    // preferred_pickup_address: addressSuburb.length > 0  ? \r\n                    //`${addressSuburb[0]?.long_name} ${addressSuburb[1]?.long_name} ${addressSuburb[2]?.short_name} ${addressSuburb[addressSuburb.length - 3]?.long_name} ${addressSuburb[addressSuburb.length - 2]?.long_name} ${addressSuburb[addressSuburb.length - 1]?.long_name}` : pickupAddress || \"\",\r\n                    // suburb: addressSuburb[addressSuburb.length - 5]?.long_name || suburb.suburbName || '',\r\n                    // state:  addressSuburb[addressSuburb.length - 3]?.long_name || state.stateName || \"\",\r\n                    // state_name:addressSuburb[addressSuburb.length - 3]?.long_name || state.stateName,\r\n                    // state_slug: addressSuburb[addressSuburb.length - 3]?.short_name || state.stateSlug,\r\n                    // postcode: addressSuburb[addressSuburb.length - 1]?.long_name || postCode,\r\n                    // suburbId: suburb.suburbID || '',//\r\n                    // stateId:    state.stateID || \"\",//\r\n                    optional_note_instructor: optionalNote,\r\n                  }}\r\n                  validationSchema={validationSchema}\r\n                  onSubmit={async (values, { setSubmitting }) => {\r\n                    setIsLoading(true);\r\n\r\n                    const formData = new FormData();\r\n                    // Object.entries(values).forEach(([key, value]) => {\r\n                    // formData.append(key, value);\r\n                    // });\r\n                    Object.entries(values).forEach(([key, value]) => {\r\n                      if (key === \"languages_spoken\") {\r\n                        // Split the languages string into an array if it's not already\r\n                        const languagesArray = value.split(\",\").map((lang) => lang.trim());\r\n                        languagesArray.forEach((language, index) => {\r\n                          formData.append(`languages_spoken[${index}]`, language);\r\n                        });\r\n                      } \r\n                      else {\r\n                        formData.append(key, value);\r\n                        formData.append('preferred_pickup_address', addressSuburb.length > 0  ? \r\n                          `${addressSuburb[0]?.long_name} ${addressSuburb[1]?.long_name} ${addressSuburb[2]?.short_name} ${addressSuburb[addressSuburb.length - 3]?.long_name} ${addressSuburb[addressSuburb.length - 2]?.long_name} ${addressSuburb[addressSuburb.length - 1]?.long_name}` : pickupAddress || \"\",);\r\n                          formData.append('suburb', addressSuburb[addressSuburb.length - 5]?.long_name || suburb.suburbName);\r\n                          formData.append('state', addressSuburb[addressSuburb.length - 3]?.long_name || state.stateName);\r\n                          formData.append('state_name', addressSuburb[addressSuburb.length - 3]?.long_name || state.stateName);\r\n                          formData.append('state_slug', addressSuburb[addressSuburb.length - 3]?.short_name || state.stateSlug);\r\n                          formData.append('postcode', addressSuburb[addressSuburb.length - 1]?.long_name || postCode);\r\n                          formData.append('suburbId',suburb.suburbID || '');//\r\n                          formData.append('stateId',state.stateID || \"\");//\r\n                      \r\n                        }\r\n                    });\r\n                     \r\n                    try {\r\n                      setIsLoading(true);\r\n                      let config = {\r\n                        method: 'post',\r\n                        maxBodyLength: Infinity,\r\n                        url:`${process.env.REACT_APP_API_BASE_URL}${API_ENDPOINTS.UPDATE_LEARNER_PREFERENCES}`,\r\n                       // url: 'https://ready-set-driving-school.pwd.net.au/api/update-instructor-profile',\r\n                        headers: { \r\n                          'Authorization': `Bearer ${token}`, \r\n                          \"Content-Type\": \"multipart/form-data\",\r\n                        },\r\n                        data : formData\r\n                      };\r\n                      axios.request(config)\r\n                        .then((response) => {\r\n                         // console.log(JSON.stringify(response.data));\r\n                          if(response.data.success){\r\n                            Swal.fire(\r\n                              \"Success!\",\r\n                              \"Your profile has been updated.\",\r\n                              \"success\"\r\n                            );\r\n                            setNewProfileImg(response.data.data.profile_picture);\r\n                            sessionStorage.setItem(\"profileImg\",response.data.data.profile_picture)\r\n                          }\r\n                          else{\r\n                            Swal.fire(\r\n                              \"Error!\",\r\n                              `${response.data.message}`,\r\n                              \"error\"\r\n                            );\r\n                          }\r\n                        })\r\n                        .catch((error) => {\r\n                         // console.log(error);\r\n                          Swal.fire(\r\n                            \"Error!\",\r\n                            `${error.response.data.message}`,\r\n                            \"error\"\r\n                          );\r\n                          setIsLoading(false);\r\n                        })\r\n                        \r\n                    } catch (error) {\r\n                      console.error(\"Error updating details:\", error);\r\n                      Swal.fire(\r\n                        \"Error!\",\r\n                        \"An error occurred while updating details. Please try again.\",\r\n                        \"error\"\r\n                      );\r\n                    } finally {\r\n                      setIsLoading(false);\r\n                      setSubmitting(false);\r\n                    }\r\n                  }}\r\n                >\r\n                  {({ errors, touched }) => (\r\n                    <Form className=\"ProfileForm RegistrationForm\">\r\n                      {/* Profile Section */}\r\n                       {/* Auto-update billing_address when addressSuburb changes */}\r\n          <BillingAddressUpdater addressSuburb={addressSuburb} />\r\n                      <fieldset>\r\n                        <div className=\"ProfileForm__infoWrp\">\r\n                          <div className=\"ProfileForm__photo\">\r\n                            <img\r\n                              src={selectedImage}\r\n                              alt=\"Profile\"\r\n                              className=\"ProfileForm__photo--image\"\r\n                            />\r\n                            <label>\r\n                              <p>Edit Photo</p>\r\n                              <input\r\n                                type=\"file\"\r\n                                placeholder=\"Edit Photo\"\r\n                                accept=\"image/*\"\r\n                                onChange={handleImageChange}\r\n                              />\r\n                            </label>\r\n                          </div>\r\n                          <div className=\"ProfileForm__group\" style={{width:'100%'}}>\r\n                            <label htmlFor=\"about_your_self\">* Preferred Transmission</label>\r\n                            <div className=\"ProfileForm__group d-flex gap-3 m-1\">\r\n                                 <div className=\"ProfileForm__checkboxWrp\">\r\n                                    {/* <Field name=\"preferred_transmission\" type=\"radio\" id=\"preferred_transmission_auto\" value=\"2\" checked={values.preferred_transmission === 2}/> */}\r\n                                    <Field name=\"preferred_transmission\">\r\n                                                    {({ field, form }) => (\r\n                                                        <input\r\n                                                          type=\"radio\"\r\n                                                          id=\"preferred_transmission_auto\"\r\n                                                          checked={field.value === 2} // Checkbox is checked if the value is 1\r\n                                                          onChange={() =>\r\n                                                            form.setFieldValue(\"preferred_transmission\", 2) // Toggle value\r\n                                                          }\r\n                                                        />\r\n                                                      )}\r\n                                    </Field>\r\n                                      <span></span>\r\n                                      <div className=\"CheckboxHighlight\"></div>\r\n                                      <label htmlFor=\"preferred_transmission_auto\"> Auto </label>\r\n                                 </div>\r\n                                 <div className=\"ProfileForm__checkboxWrp\">\r\n                                    {/* <Field name=\"preferred_transmission\" type=\"radio\" id=\"preferred_transmission_manual\" value=\"3\" checked={values.preferred_transmission === 3}/> */}\r\n                                    <Field name=\"preferred_transmission\">\r\n                                                    {({ field, form }) => (\r\n                                                        <input\r\n                                                          type=\"radio\"\r\n                                                          id=\"preferred_transmission_manual\"\r\n                                                          checked={field.value === 3} // Checkbox is checked if the value is 1\r\n                                                          onChange={() =>\r\n                                                            form.setFieldValue(\"preferred_transmission\", 3) // Toggle value\r\n                                                          }\r\n                                                        />\r\n                                                      )}\r\n                                    </Field>\r\n                                     <span></span>\r\n                                    <div className=\"CheckboxHighlight\"></div>\r\n                                    <label htmlFor=\"preferred_transmission_manual\"> Manual </label>\r\n                                  </div>\r\n                                  <div className=\"ProfileForm__checkboxWrp\">\r\n                                    {/* <Field name=\"preferred_transmission\" type=\"radio\" id=\"preferred_transmission_both\" value=\"1\" checked={values.preferred_transmission === 1}/> */}\r\n                                    <Field name=\"preferred_transmission\">\r\n                                                    {({ field, form }) => (\r\n                                                        <input\r\n                                                          type=\"radio\"\r\n                                                          id=\"preferred_transmission_both\"\r\n                                                          checked={field.value === 1} // Checkbox is checked if the value is 1\r\n                                                          onChange={() =>\r\n                                                            form.setFieldValue(\"preferred_transmission\", 1) // Toggle value\r\n                                                          }\r\n                                                        />\r\n                                                      )}\r\n                                    </Field>\r\n                                     <span></span>\r\n                                    <div className=\"CheckboxHighlight\"></div>\r\n                                    <label htmlFor=\"preferred_transmission_both\"> Both </label>\r\n                                  </div>\r\n                                  {errors.preferred_transmission && touched.preferred_transmission && (\r\n                              <div className=\"error\">{errors.preferred_transmission}</div>\r\n                            )}\r\n                            </div>\r\n                          \r\n                            <label htmlFor=\"languages_spoken\"> * Language Spoken  </label>\r\n                            <Field   type=\"text\"  name=\"languages_spoken\"  id=\"languages_spoken\" className=\"form-control\" />\r\n                           \r\n                          </div>\r\n                          </div>\r\n\r\n                          <div className=\"ProfileForm__group\">\r\n                          <Row>\r\n                            <Col md={12}>\r\n                              <div className=\"ProfileForm__group\">\r\n                                <label htmlFor=\"billing_address\">  *Preferred pickup address </label>\r\n                                {/* <Field type=\"text\" name=\"billing_address\" id=\"billing_address\"  className=\"form-control\" /> */}\r\n                                {  <AutocompleteAddress setAddressSuburb={setAddressSuburb} billingAddrs={pickupAddress} /> }\r\n                                {errors.billing_address && touched.billing_address && ( <div className=\"error\"> {errors.billing_address}</div> )}\r\n                                {/* {errors.billing_address &&\r\n                                  touched.billing_address && (\r\n                                    <div className=\"error\">\r\n                                      {errors.billing_address}\r\n                                    </div>\r\n                                  )} */}\r\n                              </div>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col md={12}>\r\n                             <p style={{'margin':'20px 0'}}>  The default pickup address will apply to all new bookings moving forward. Updating your preferred pickup address will not affect the address linked to your current bookings. To change the pickup address for an existing booking, simply select the specific lesson from your dashboard and make the necessary updates</p>\r\n                            </Col>\r\n                            <Col md={6}>\r\n                              <div className=\"ProfileForm__group\">\r\n                                <label htmlFor=\"suburb\">*Suburb</label>\r\n                                {/* <Field type=\"text\" name=\"suburb\" id=\"suburb\" className=\"form-control\" disabled ></Field> */}\r\n                                <input type=\"text\" value={Array.isArray(addressSuburb) ? addressSuburb[1]?.long_name : suburb.suburbName} className=\"form-control\" disabled/>\r\n                                {/* <Field as=\"select\" name=\"suburb\" id=\"suburb\" className=\"form-control\" >\r\n                                                         \r\n                                                          {suburb?.map((item, i)=>(\r\n                                                            <option key={item.id} value={item.id}>{item.suburb}</option>\r\n                                                          ))}\r\n                                </Field> */}\r\n                              </div>\r\n                            </Col>\r\n                            {/* <Col md={4}>\r\n                              <div className=\"ProfileForm__group\">\r\n                                <label htmlFor=\"post_code\">*Postcode</label>\r\n                                <Field type=\"text\" name=\"post_code\" id=\"post_code\" className=\"form-control\" disabled ></Field>\r\n                                \r\n                              </div>\r\n                            </Col> */}\r\n                            <Col md={6}>\r\n                              <div className=\"ProfileForm__group\">\r\n                                <label htmlFor=\"state\">*State</label>\r\n                                <input type=\"text\" value={Array.isArray(addressSuburb) ? addressSuburb[3]?.long_name : state.stateName} className=\"form-control\" disabled/>\r\n                                \r\n                                {/* <Field type=\"text\" name=\"state\" id=\"state\" className=\"form-control\" disabled></Field> */}\r\n                                \r\n                              </div>\r\n                            </Col>\r\n                          </Row>\r\n                          </div>\r\n\r\n                          <div className=\"ProfileForm__group\">\r\n                            <label htmlFor=\"about_your_self\">Optional Note to Instructor(s)</label>\r\n                            <Field as=\"textarea\" name=\"optional_note_instructor\" id=\"state\" className=\"form-control\"></Field>\r\n                            {/* <textarea className=\"form-control\" name=\"optional_note_instructor\">{optionalNote}</textarea> */}\r\n                           \r\n                          </div>\r\n                          \r\n                          \r\n                          \r\n                        \r\n                      </fieldset>\r\n\r\n                     \r\n\r\n                      {/* Notification Settings Section */}\r\n                                              <div className=\"personalDetailsForm__top\">\r\n                                                <h4>Notification Settings</h4>\r\n                                              </div>\r\n                                              <div className=\"d-flex flex-column flex-sm-row\">\r\n                                                <fieldset className=\"d-flex gap-0 flex-grow-1\">\r\n                                                  <label htmlFor=\"Email\">Email</label>\r\n                                                  <div className=\"ProfileForm__group d-flex gap-2 m-1\">\r\n                                                    <Field name=\"email_comm_offer\">\r\n                                                      {({ field, form }) => (\r\n                                                        <input\r\n                                                          type=\"checkbox\"\r\n                                                          id=\"email_comm_offer\"\r\n                                                          checked={field.value === 1} // Checkbox is checked if the value is 1\r\n                                                          onChange={() =>\r\n                                                            form.setFieldValue(\"email_comm_offer\", field.value === 1 ? 0 : 1) // Toggle value\r\n                                                          }\r\n                                                        />\r\n                                                      )}\r\n                                                      </Field>\r\n                                                    <div className=\"CheckboxHighlight\"></div>\r\n                                                    <label htmlFor=\"email_comm_offer\">\r\n                                                      Marketing Communications & Special Offers\r\n                                                    </label>\r\n                                                  </div>\r\n                                                </fieldset>\r\n                                                <fieldset className=\"d-flex gap-0 flex-grow-1\">\r\n                                                  <label htmlFor=\"SMS\">SMS</label>\r\n                                                  <div className=\"ProfileForm__group d-flex gap-2 m-1\">\r\n                                                    <Field name=\"sms_comm_offer\">\r\n                                                    {({ field, form }) => (\r\n                                                        <input\r\n                                                          type=\"checkbox\"\r\n                                                          id=\"sms_comm_offer\"\r\n                                                          checked={field.value === 1} // Checkbox is checked if the value is 1\r\n                                                          onChange={() =>\r\n                                                            form.setFieldValue(\"sms_comm_offer\", field.value === 1 ? 0 : 1) // Toggle value\r\n                                                          }\r\n                                                        />\r\n                                                      )}\r\n                                                    </Field>\r\n                                                    <div className=\"CheckboxHighlight\"></div>\r\n                                                    <label htmlFor=\"sms_comm_offer\">\r\n                                                      Marketing Communications & Special Offers\r\n                                                    </label>\r\n                                                  </div>\r\n                                                </fieldset>\r\n                                              </div>\r\n\r\n                      {/* Submit Button */}\r\n                      <div className=\"ProfileForm__actions\" style={{'justifyContent': 'flex-end'}}>\r\n                        <button\r\n                          type=\"submit\"\r\n                          className=\"btn btn-teal\"\r\n                          disabled={isLoading}\r\n                        >\r\n                          {isLoading ? \"Saving...\" : \"Save Changes\"}\r\n                        </button>\r\n                      </div>\r\n                    </Form>\r\n                  )}\r\n                </Formik>\r\n                </div>\r\n\r\n\r\n\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n        <ToastContainer />\r\n      </div>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n"],"names":["Preferences","userData","token","setNewProfileImg","useAuth","isLoading","setIsLoading","useState","InstructorLanguages","setInstructorLanguages","Transmission","setTransmission","selectedImage","setSelectedImage","placeholderImg","selectedImageFile","setSelectedImageFile","addressSuburb","setAddressSuburb","optionalNote","setOptionalNote","sms_notification","setSmsnotification","email_notification","setEmailnotification","pickupAddress","setPickupAddress","suburb","setSuburb","suburbID","suburbName","state","setState","stateID","stateName","postCode","setPostCode","navigate","useNavigate","useEffect","async","response","axios","get","API_ENDPOINTS","LEARBER_PREFERENCES","headers","Authorization","data","success","language_spoken","preferred_transmission","profile_picture","preferred_pickup_address","optional_note_instructor","sms_comm_offer","email_comm_offer","suburb_id","state_name","stateSlug","state_slug","postcode","error","console","fetchLearnerDetails","id","validationSchema","Yup","shape","required","handleImageChange","e","file","target","files","reader","FileReader","onload","result","readAsDataURL","BillingAddressUpdater","_ref","setFieldValue","useFormikContext","_jsx","_Fragment","children","_jsxs","className","Breadcrumb","Container","Row","Col","lg","Link","onClick","Formik","enableReinitialize","initialValues","languages_spoken","join","onSubmit","values","_ref2","setSubmitting","formData","FormData","Object","entries","forEach","_ref3","key","value","split","map","lang","trim","language","index","append","_addressSuburb$","_addressSuburb$2","_addressSuburb$3","_addressSuburb","_addressSuburb2","_addressSuburb3","_addressSuburb4","_addressSuburb5","_addressSuburb6","_addressSuburb7","_addressSuburb8","length","long_name","short_name","config","method","maxBodyLength","Infinity","url","UPDATE_LEARNER_PREFERENCES","request","then","Swal","sessionStorage","setItem","message","catch","_ref4","_addressSuburb$4","_addressSuburb$5","errors","touched","Form","src","alt","type","placeholder","accept","onChange","style","width","htmlFor","Field","name","_ref5","field","form","checked","_ref6","_ref7","md","AutocompleteAddress","billingAddrs","billing_address","Array","isArray","disabled","as","_ref8","_ref9","ToastContainer"],"sourceRoot":""}