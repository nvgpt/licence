{"version":3,"file":"static/js/8570.be67d799.chunk.js","mappings":"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","sources":["Learner-dashboard/Components/Payment.jsx","Learner-dashboard/BookNow.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { apiPost } from \"../../utilities/axiosInstance\";\r\nimport API_ENDPOINTS from \"../../utilities/apiEndPoints\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport Swal from \"sweetalert2\";\r\nimport Stripeicon from \"../../assets/images/stripe-icon.png\"\r\nimport axios from \"axios\";\r\nimport { useAuth } from \"../../context/AuthContext\";\r\n\r\nimport { Elements, CardElement, useStripe, useElements} from \"@stripe/react-stripe-js\";\r\n// Load your Stripe public key\r\n//const keyStrip = \"pk_test_51QKvIVE7r2hnvzMGPGX4kCmSmsLjTF4ITASBQu9ZGxuF11rwF6m7lTRIHL0QsMCWW9siUACflECq9GGcqHLRvaAC00GSvyGVbb\";\r\nconst keyStrip = \"pk_test_51Qx3GlFgIjlU5Y2bUsYduThBEtzpVghTlezzWPqAA7VuXNUvWZgp6s2r67h6xbZdCyZGzbVeVOn6eDJ8gKqmcK3k00hVDkb0p8\";\r\nconst stripePromise = loadStripe(keyStrip);\r\n\r\nfunction PaymentForm({learnerBookData, token, bookWithNewTrainerID, bookNow}) {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const [isProcessing, setIsProcessing, ] = useState(false);\r\n // const isTestPackageStatus = isTestPackage ? true : false;\r\n\r\n  const submitPay = async (bookNowResponse) => {\r\n    const bookingId = Math.floor(Math.random() * 9000000000) + 1000000000;\r\n    try {\r\n     // const randNum = Math.floor(Math.random() * 90000) + 10000;\r\n      const submitPayResponse = await apiPost(API_ENDPOINTS.PAYNOW, {\r\n      payment_status: true,\r\n      billing_name: learnerBookData.billing_name,\r\n      billing_address: learnerBookData.billing_address,\r\n      billing_suburb_id: learnerBookData.billing_suburb_id,\r\n      billing_state_id: learnerBookData.billing_state_id,\r\n      bookingNumber: bookingId,\r\n      learner_token: bookNowResponse.learner_token,\r\n\r\n      billing_suburb :learnerBookData.billing_suburb,\r\n      billing_state_slug :learnerBookData.billing_state_slug,\r\n      billing_state_name:learnerBookData.billing_state_name,\r\n      billing_postcode:learnerBookData.billing_postcode,\r\n      });\r\n\r\n      if(submitPayResponse.success){\r\n        Swal.fire({\r\n          title: \"Payment Successful!\",\r\n          text: \"Your payment was successful.\",\r\n          html: `Your booking id is <b>${bookingId}</b>`,\r\n          icon: \"success\",\r\n          timer: 4000,\r\n          showConfirmButton: false,\r\n        }).then(() => { window.location.href = '/learner/dashboard'; });\r\n      }\r\n      else{ toast.error(`${submitPayResponse.message}`); }\r\n      \r\n    } catch (error) { console.error(\"Payment submission error:\", error); }\r\n  };\r\n\r\n \r\n  const handleSubmit = async (e) => {\r\n   // console.log('submit starte')\r\n   e.preventDefault();\r\n   \r\n       if (!stripe || !elements) {\r\n         toast.error(\"Stripe has not loaded. Please try again.\");\r\n         return;\r\n       }\r\n     \r\n       setIsProcessing(true);\r\n     \r\n       // Prepare the payload for the API call\r\n       try {\r\n       \r\n    //bookNow\r\n    const clientSecret = bookNow.client_key;\r\n   // console.log(clientSecret)\r\n         if (!clientSecret) {\r\n           toast.error(\"Failed to retrieve payment details from the server.\");\r\n                             setIsProcessing(false);\r\n                              return;\r\n         }\r\n         else{\r\n               // Confirm the payment with Stripe\r\n               const { error, paymentIntent } = await stripe.confirmCardPayment(\r\n               clientSecret,\r\n               {  payment_method: { card: elements.getElement(CardElement),  }, }\r\n               );\r\n                 if (error) {\r\n                             toast.error(`Payment failed: ${error.message}`);\r\n                            // console.log(error)\r\n                             setIsProcessing(false);\r\n                 } else if (paymentIntent && paymentIntent.status === \"succeeded\") {\r\n                             submitPay(bookNow);\r\n                            // console.log('submit pay')\r\n                             setIsProcessing(false);\r\n                 } else {\r\n                           toast.warn(\"Payment status unknown. Please contact support.\");\r\n                           setIsProcessing(false);\r\n                 }\r\n              }\r\n        }       \r\n         // Additional logic here if required (e.g., handling Stripe payment)\r\n        catch (error) {\r\n                       console.error(\"API call error:\", error);\r\n                       // Handle Axios errors\r\n                       if (error.response) {\r\n                                         toast.error(\r\n                                         error.response.data?.data.error ||\r\n                                         error.response.statusText ||\r\n                                         \"An error occurred with the request.\"\r\n                                         );\r\n                       } else if (error.request) {\r\n                                         toast.error(\"No response received from the server. Please try again.\");\r\n                       } else {\r\n                                         toast.error(\"An unexpected error occurred. Please try again.\");\r\n                       }\r\n       } finally {\r\n         setIsProcessing(false);\r\n       }\r\n   \r\n   \r\n       \r\n    // Prepare the payload for the API call\r\n  //   const payload = {\r\n  //     amount: Number(+learnerBookData.totalBookHourPrice + +learnerBookData.totalTestPackagePrice),\r\n  // address: learnerBookData.preferred_pickup_address,\r\n  // instructor_id: Number(bookWithNewTrainerID || learnerBookData.bookWithTrainerID),\r\n  // // \"state_id\": 7,\r\n  // // \"suburb_id\": 5612,\r\n  // optional_msg_to_your_instructor: learnerBookData.optional_note_instructor,\r\n  // test_package_price: Number(learnerBookData.totalTestPackagePrice),\r\n  // credit_hours_price: Number(0.00),\r\n  // suburb:learnerBookData.suburb,\r\n  // state_slug:learnerBookData.state_slug,\r\n  // postcode:Number(learnerBookData.postcode),\r\n  // state_name:learnerBookData.state_name,\r\n  // lesson_details:learnerBookData.lessonBookingData\r\n  //   };\r\n  \r\n//     try {\r\n//       // Make the API call\r\n//     //  console.log(\"Making API call with payload:\", payload);\r\n//       const response = await axios.post(\r\n//         `${process.env.REACT_APP_API_BASE_URL || \"https://ready-set-driving-school.pwd.net.au\"}${API_ENDPOINTS.LEARNER_BOOK_NOW}`,\r\n//         payload, { headers: { \"Content-Type\": \"application/json\", Authorization: `Bearer ${token}` }}\r\n//       );\r\n//     //  console.log(\"API Response:\", response.data);\r\n//       if (!response.data.success) {\r\n//         toast.error(response.data.data.error || response.data.message || \"Request failed.\");\r\n//         setIsProcessing(false);\r\n//         return;\r\n//       }\r\n// else{\r\n//   const bookNowResponse = response.data.data;\r\n//   const clientSecret = response.data.data.client_key;\r\n//   //console.log(clientSecret,response)\r\n//        if (!clientSecret) {\r\n//    toast.error(\"Failed to retrieve payment details from the server.\");\r\n//    setIsProcessing(false);\r\n//    return;\r\n//  }\r\n//  else{\r\n//   const resMessage = response.success;\r\n//   // Confirm the payment with Stripe\r\n//   const { error, paymentIntent } = await stripe.confirmCardPayment(\r\n//     clientSecret,\r\n//     { payment_method: { card: elements.getElement(CardElement), }, }\r\n//   );\r\n\r\n//   if (error) {\r\n//     toast.error(`Payment failed: ${error.message}`);\r\n//     setIsProcessing(false);\r\n//   } else if (paymentIntent && paymentIntent.status === \"succeeded\") {\r\n//     submitPay({bookNowResponse, resMessage});\r\n//     setIsProcessing(false);\r\n//   } else {\r\n//     toast.warn(\"Payment status unknown. Please contact support.\");\r\n//     setIsProcessing(false);\r\n//   }\r\n\r\n//  }\r\n// }       \r\n//       // Additional logic here if required (e.g., handling Stripe payment)\r\n//     } catch (error) {\r\n//       console.error(\"API call error:\", error);\r\n//       // Handle Axios errors\r\n//       if (error.response) {\r\n//         toast.error( error.response.data?.message ||  error.response.statusText || \"An error occurred with the request.\");\r\n//       } else if (error.request) { toast.error(\"No response received from the server. Please try again.\"); } else {\r\n//         toast.error(\"An unexpected error occurred. Please try again.\");\r\n//       }\r\n//     } finally {  setIsProcessing(false); }\r\n  };\r\n\r\n\r\n\r\n  const options = {hidePostalCode: true, // Disable the postal/zip code field\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"RegistrationForm__field \">\r\n      <label>Pay with debit/credit card</label>\r\n      <CardElement options={options}/>\r\n      <label className=\"stripe_label\"><input type=\"radio\" defaultChecked/><div className=\"img_cover\"><img src={Stripeicon}/></div><span> Pay with Stripe</span>\r\n      </label>\r\n      <button type=\"submit\" disabled={!stripe || isProcessing} className=\"btn btn-blue\" style={{ 'width': '100%','maxWidth': '100%','borderRadius': '6px'}}>\r\n        {isProcessing ? \"Processing...\" : \"CONFIRM: MAKE PAYMENT\"}\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nfunction Payment() {\r\n\r\n       const {learnerBookData, token, bookWithNewTrainerID, bookNow} = useAuth();\r\n  return (\r\n    <>\r\n      <Elements stripe={stripePromise}>\r\n        <PaymentForm\r\n          learnerBookData={learnerBookData}\r\n          token={token}\r\n          bookWithNewTrainerID={bookWithNewTrainerID}\r\n          bookNow={bookNow}\r\n        />\r\n      </Elements>\r\n      <ToastContainer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Payment;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link, useLocation,  useNavigate } from \"react-router-dom\";\r\nimport Breadcrumb from \"./Components/Breadcrumb\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport { apiPost } from \"../utilities/axiosInstance\";\r\nimport API_ENDPOINTS from \"../utilities/apiEndPoints\";\r\nimport Payment from \"./Components/Payment.jsx\";\r\nimport { useAuth } from \"../context/AuthContext\";\r\nimport toDDMMYYYY from '../Components/NewFormatDate'\r\nimport { apiGet } from \"../utilities/axiosInstance\";\r\nimport AutocompleteAddress from '../Components/AutocompleteAddress';\r\n\r\nfunction BookNow() {\r\n  const {learnerBookData, setLearnerBookData, bookWithNewTrainerID} = useAuth();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const [bookTestPackage] = useState(location.state?.bookTest || false);\r\n  //console.log(bookTestPackage)\r\n\r\n  const [searchValue, setSearchValue]=useState(\"\")\r\n  const [suggestions, setSuggestions] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [noResults, setNoResults] = useState(false);\r\n  const [isSuggestionSelected, setIsSuggestionSelected] = useState(false);\r\n\r\n  /**search suburb */\r\n  useEffect(() => {\r\n    if (!isSuggestionSelected && searchValue.trim() !== \"\") {\r\n      const delayDebounceFn = setTimeout(() => { fetchSuggestions(searchValue); }, 500);\r\n      return () => clearTimeout(delayDebounceFn);\r\n    }\r\n  }, [searchValue, isSuggestionSelected]);\r\n\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n      setSearchValue(value);\r\n      setIsSuggestionSelected(false);\r\n  };\r\n\r\n  const fetchSuggestions = async (query) => {\r\n    setLoading(true);\r\n    setNoResults(false);\r\n\r\n    try {\r\n      const response = await apiPost(API_ENDPOINTS.FIND_SUBURBS, { filter: query, });\r\n      if (response.success && response.data) {\r\n        const filteredSuggestions = response.data.filter((item) =>\r\n          [item.suburb, item.stateCode, item.postcode.toString()].some((field) =>\r\n            field.toLowerCase().includes(query.toLowerCase())\r\n          )\r\n        );\r\n\r\n        setNoResults(filteredSuggestions.length === 0);\r\n        setSuggestions(filteredSuggestions);\r\n      } else {\r\n        setSuggestions([]);\r\n        setNoResults(true);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching suggestions:\", error);\r\n      setSuggestions([]);\r\n      setNoResults(true);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSuggestionClick = (suggestion) => {\r\n    setSearchValue(`${suggestion.suburb}, ${suggestion.stateCode} (${suggestion.postcode})`);\r\n    setIsSuggestionSelected(true);\r\n    setSuggestions([]);\r\n    setLearnerBookData((prev) => ({ ...prev,  billing_suburb_id: suggestion.id,  }))\r\n   \r\n  };\r\n  /**search subburb */\r\n  /**fetch state list */\r\n  const fetchData = async () => {\r\n    try {\r\n      const [ statesRes ] = await Promise.all([ apiGet(API_ENDPOINTS.STATES), ]);\r\n      // handle states response\r\n      if (statesRes?.data) {\r\n        setLearnerBookData((prevState) => ({\r\n          ...prevState,\r\n          allStaeList: statesRes.data,\r\n        }));\r\n      } else {\r\n        // console.error(\"Unexpected test package response:\", statesRes);\r\n      }\r\n  \r\n    } catch (error) {\r\n      // setError(error.message); // Set the error message to state\r\n      // console.error(error); // Log error for debugging\r\n    } finally {\r\n    \r\n    }\r\n  };\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"mainContent learnerDashboard\">\r\n        <Breadcrumb />\r\n        <div className=\"mainContent__assets\">\r\n          <Container>\r\n            <Row>\r\n              <Col lg={12}>\r\n                <div className=\"learnerDashboard__wrp\">\r\n                  <div className=\"secIntro\">\r\n                    <div className=\"secIntro__left\">\r\n                      {/* <h2>Choose Location</h2> */}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n    <div className=\"bookNow__stepWrap d-flex\">\r\n      <div className=\"bookNow__stepWrapLeft\">\r\n        \r\n        <h2>Pay for Booking</h2>\r\n\r\n        <div className=\"RegistrationForm\">\r\n        <div className=\"bookNow__drivingLessons\" style={{'overflow':'visible'}}>\r\n        <div className=\"bookNow__drivingLessonsHead text-center text-black bg-light-grey\" style={{'borderRadius':'10px 10px 0 0'}}>\r\n          <h4 style={{textAlign:'left'}}>Enter Your Payment Details</h4></div>\r\n        <div className=\"learnerDashboard__bottom\">\r\n          <div className=\"RegistrationForm__group\">\r\n            <div className=\"RegistrationForm__field\">\r\n              <label htmlFor=\"*Billing Name\">*Billing Name</label>\r\n              <input type=\"text\" name=\"billing_name\" id=\"billing_name\" value={learnerBookData?.billing_name} required\r\n                onChange={(e) => setLearnerBookData((prev) => ({ ...prev, billing_name: e.target.value, }))  }\r\n              />\r\n            </div>\r\n            <div className=\"RegistrationForm__field\">\r\n              <label htmlFor=\"*Billing Address\">*Billing Address</label>\r\n              <AutocompleteAddress setLearnerBookData={setLearnerBookData}/>\r\n              {/* <input type=\"text\" name=\"billing_address\" id=\"billing_address\" value={learnerBookData?.billing_address}  required\r\n                onChange={(e) => setLearnerBookData((prev) => ({...prev, billing_address: e.target.value, }))  }\r\n              /> */}\r\n            </div>\r\n          </div>\r\n          <div className=\"RegistrationForm__group\">\r\n            <div className=\"RegistrationForm__field\" style={{'position':'relative'}}>\r\n              <label htmlFor=\"*Suburb\">*Suburb</label>\r\n              <input type=\"text\" name=\"billing_suburb_id\" id=\"billing_suburb_id\" value={learnerBookData?.billing_suburb} required\r\n              disabled={true} readOnly/>\r\n              {/* <ul className=\"suggestions-list\" style={{top:'83px'}}>\r\n              {loading && <li>Loading...</li>}\r\n              {noResults && !loading && (\r\n              <li>No results found for \"{searchValue}\"</li>\r\n              )}\r\n\r\n              {suggestions.length > 0 && !loading && (\r\n              suggestions.map((suggestion, index) => (\r\n                <li\r\n                  key={index}\r\n                  onClick={() => handleSuggestionClick(suggestion)}\r\n                  style={{ cursor: \"pointer\" }}\r\n                >\r\n                  <div>\r\n                    <strong>{suggestion.suburb}</strong>, {suggestion.stateCode}{\" \"}\r\n                    ({suggestion.postcode})\r\n                  </div>\r\n                </li>\r\n              ))\r\n              )}\r\n              </ul> */}\r\n            </div>\r\n            <div className=\"RegistrationForm__field\">\r\n              <label htmlFor=\"*State\">*State</label>\r\n              <input type=\"text\" name=\"billing_suburb_id\" id=\"billing_suburb_id\" value={learnerBookData?.billing_state_name} required\r\n              disabled={true} readOnly/>\r\n              {/* <select name=\"billing_state_id\" id=\"billing_state_id\" value={learnerBookData?.billing_state_id} required\r\n                onChange={(e) =>  setLearnerBookData((prev) => ({...prev, billing_state_id: e.target.value, }))   } >\r\n                <option value=\"\">Please Select</option>\r\n                {learnerBookData.allStaeList?.map((state) => ( <option key={state.id} value={state.id}>  {state.name}  </option> ))}\r\n              </select> */}\r\n            </div>\r\n          </div>\r\n        </div>\r\n          </div>\r\n          <hr />\r\n         {/* <button onClick={()=>{console.log(learnerBookData, bookWithNewTrainerID)}}>click here</button> */}\r\n         {learnerBookData.billing_name && learnerBookData.billing_address  && <Payment/>}\r\n          {/* <Payment/> */}\r\n          \r\n          <div className=\"RegistrationForm__group\">\r\n            <div className=\"RegistrationForm__field\">\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* Right Side: Selected Package Summary */}\r\n      <div className=\"bookNow__stepWrapRight\">\r\n      <div className=\"bookNow__drivingLessons\">\r\n                      <div className=\"bookNow__drivingLessonsHead text-center text-black bg-light-grey\">\r\n                        <h4>Your Current Bookings</h4>\r\n                      </div>\r\n                      <div className=\"bookNow__subTotal bg-white\">\r\n                       {learnerBookData.lessonBookingData.length > 0 || learnerBookData.totalTestPackagePrice > 0 ? \r\n                        <>\r\n\r\n                         {learnerBookData.lessonBookingData.length > 0 && <div className=\"learnerDashboard__bottom\">\r\n                                <div className=\"learnerDashboard__subTotalrow d-flex justify-content-between align-items-center\">\r\n                                <strong>\r\n                                {learnerBookData?.lessonBookingData?.length} x Driving Lesson{learnerBookData?.lessonBookingData?.length > 1 ? 's':''} \r\n                                ( {learnerBookData?.totalBookHours} Hour{learnerBookData?.totalBookHours >1 ?'s':''})\r\n                                <span>  \r\n                                  {toDDMMYYYY(learnerBookData?.lessonBookingData[0]?.lesson_date)}&nbsp;\r\n                                   {learnerBookData?.lessonBookingData[0]?.lesson_time}</span>\r\n                                </strong>\r\n                                <p> ${learnerBookData?.totalBookHourPrice}</p>\r\n                               \r\n                                </div>\r\n                            </div>\r\n                        }\r\n                        {/* {learnerBookData.totalTestPackagePrice > 0 && <div className=\"learnerDashboard__bottom\">\r\n                          <div className=\"learnerDashboard__subTotalrow d-flex justify-content-between align-items-center\">\r\n                            <div><strong> Driving Test Package</strong></div>\r\n                            <div className=\"bookNow__drivingPrice d-flex align-items-center\">\r\n                              <strong>${learnerBookData?.totalTestPackagePrice}</strong>\r\n                              <button className=\"delete-icon\" style={{border:'0',color:'red',marginLeft:'20px', backgroundColor:'#fff'}}\r\n                              onClick={()=>{\r\n                                setLearnerBookData((prevState) => ({\r\n                                  ...prevState,\r\n                                  totalTestPackagePrice: 0,\r\n                                })); if(learnerBookData.lessonBookingData.length > 0){\r\n                                   return\r\n                                }\r\n                                else{navigate(\"/learner/dashboard\")}; \r\n                              }}\r\n                              >X</button>\r\n                            </div>\r\n                          </div>\r\n                          </div>\r\n                        } */}\r\n\r\n                        <div className=\"font-secondary bookNow__subTotalrow d-flex justify-content-between align-items-center border-dark\">\r\n                          {/* <strong>Subtotal</strong><strong>${+learnerBookData?.totalBookHourPrice + +learnerBookData.totalTestPackagePrice}</strong> */}\r\n                          <strong>Subtotal</strong><strong>${+learnerBookData?.totalBookHourPrice + +0}</strong>\r\n                        </div>\r\n                        <div className=\"font-secondary border-y-0 learnerDashboard__bottom bg-light-grey border-grey padding-sm\">\r\n                          <div className=\"learnerDashboard__subTotalrow d-flex justify-content-between align-items-center\">\r\n                            <span className=\"p-0\">Credit Applied</span><p>-$0.00</p>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"font-secondary bookNow__subTotalrow d-flex justify-content-between align-items-center\">\r\n                          <h4>Total Amount</h4>\r\n                          {/* <h4>${+learnerBookData?.totalBookHourPrice + +learnerBookData.totalTestPackagePrice}</h4> */}\r\n                          <h4>${+learnerBookData?.totalBookHourPrice + +0}</h4>\r\n                        </div>\r\n                        </>\r\n                        :\r\n                         <><div className=\"learnerDashboard__bottom\"><h4>No lesson confirmed</h4></div></>\r\n                      }\r\n                        \r\n\r\n                      </div>\r\n                    </div>\r\n      </div>\r\n    \r\n    </div>\r\n\r\n    </Col>\r\n    </Row>\r\n    </Container>\r\n    </div>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BookNow;\r\n"],"names":["stripePromise","loadStripe","PaymentForm","_ref","learnerBookData","token","bookWithNewTrainerID","bookNow","stripe","useStripe","elements","useElements","isProcessing","setIsProcessing","useState","_jsxs","onSubmit","async","e","preventDefault","clientSecret","client_key","toast","error","paymentIntent","confirmCardPayment","payment_method","card","getElement","CardElement","message","status","bookingId","Math","floor","random","submitPayResponse","apiPost","API_ENDPOINTS","PAYNOW","payment_status","billing_name","billing_address","billing_suburb_id","billing_state_id","bookingNumber","learner_token","bookNowResponse","billing_suburb","billing_state_slug","billing_state_name","billing_postcode","success","Swal","title","text","html","icon","timer","showConfirmButton","then","window","location","href","console","submitPay","warn","_error$response$data","response","data","statusText","request","className","children","_jsx","options","hidePostalCode","type","defaultChecked","src","Stripeicon","disabled","style","useAuth","_Fragment","Elements","ToastContainer","_location$state","_learnerBookData$less","_learnerBookData$less2","_learnerBookData$less3","_learnerBookData$less4","setLearnerBookData","useNavigate","useLocation","bookTestPackage","state","bookTest","searchValue","setSearchValue","suggestions","setSuggestions","loading","setLoading","noResults","setNoResults","isSuggestionSelected","setIsSuggestionSelected","useEffect","trim","delayDebounceFn","setTimeout","fetchSuggestions","clearTimeout","FIND_SUBURBS","filter","query","filteredSuggestions","item","suburb","stateCode","postcode","toString","some","field","toLowerCase","includes","length","statesRes","Promise","all","apiGet","STATES","prevState","allStaeList","fetchData","Breadcrumb","Container","Row","Col","lg","textAlign","htmlFor","name","id","value","required","onChange","prev","target","AutocompleteAddress","readOnly","Payment","lessonBookingData","totalTestPackagePrice","totalBookHours","toDDMMYYYY","lesson_date","lesson_time","totalBookHourPrice"],"sourceRoot":""}